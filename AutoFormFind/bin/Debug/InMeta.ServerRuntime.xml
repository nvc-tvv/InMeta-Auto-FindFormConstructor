<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InMeta.ServerRuntime</name>
    </assembly>
    <members>
        <member name="T:Integro.InMeta.Attachments.AttachmentsException">
            <summary>
            Представляет класс исключений при операциях над прикрепленными файлами
            реестровых объектов.
            </summary>
            
        </member>
        <member name="T:Integro.InMeta.Attachments.ObjectAttachment">
            <summary>
            Обеспечивает доступ к прикрепленному файлу реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachment.#ctor(System.String,System.String,System.String)">
            <summary>
            Создает новый прикрепленный файл.
            </summary>
            <param name="fileName">Имя файла, под которым прикрепленный файл будет 
            сохранен в папке прикреплений объекта.</param>
            <param name="caption">Заголовок прикрепленного файла.</param>
            <param name="description">Описание прикрепленного файла.</param>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachment.SetData(System.String)">
            <summary>
            Задает текстовое содержимое прикрепленного файла.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachment.SetDataFile(System.String)">
            <summary>
            Задает имя файла, которым следует заменить прикрепленный файл.
            </summary>
            <param name="dataSourceFileName">Имя файла, включая полный путь.</param>
            <remarks>Данный метод запоминает имя исходного файла. 
            Копирование содержимого файла будет произведено в методе <c>Commit</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachment.GetDataFile(System.String)">
            <summary>
            Копирует содержимое прикрепленного файла в файл с указанным именем.
            </summary>
            <param name="dstFileName">Имя файла, включая полный путь, куда следует скопировать прикрепленный файл.</param>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachment.GetStringData">
            <summary>
            Возвращает текстовое содержимое прикрепленного файла.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachment.Delete">
            <summary>
            Удаляет прикрепленный файл.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Attachments.ObjectAttachment.IsDeleted">
            <summary>
            Возвращает признак того, что прикрепленный файл удален.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Attachments.ObjectAttachment.FileName">
            <summary>
            Возвращает или изменяет имя файла, под которым прикрепленный файл будет 
            сохранен в папке прикреплений объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Attachments.ObjectAttachment.Caption">
            <summary>
            Возвращает или изменяет заголовок прикрепленного файла.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Attachments.ObjectAttachment.Description">
            <summary>
            Возвращает или изменяет описание прикрепленного файла.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Attachments.ObjectAttachments">
            <summary>
            Предоставляет доступ к прикрепленным файлам реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachments.#ctor(Integro.InMeta.Runtime.DataObject)">
            <summary>
            Инициализирует объект доступа к прикрепленным файлам.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachments.FindByFileName(System.String)">
            <summary>
            Производит поиск прикрепленного файла по имени.
            </summary>
            <param name="fileName">Имя файла.</param>
            <returns>Найденный прикрепленный файл или <c>null</c>, 
            если файл не найден.</returns>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachments.Add(Integro.InMeta.Attachments.ObjectAttachment)">
            <summary>
            Добавляет прикрепленный файл.
            </summary>
            <param name="attachment"></param>
        </member>
        <member name="M:Integro.InMeta.Attachments.ObjectAttachments.Commit">
            <summary>
            Фиксирует изменения, произведенные над прикрепленными файлами реестрового объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Attachments.ObjectAttachments.Count">
            <summary>
            Возвращает количество прикрепленных файлов.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Attachments.ObjectAttachments.Item(System.Int32)">
            <summary>
            Возвращает прикрепленный файл по порядковому номеру.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.CentralServer.CentralServer">
            <summary>
            ИнМета - сервер данных.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServer.InitializeLifetimeService">
            <summary>
            Инициализация службы управления временем жизни сервера.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServer.#ctor(System.Int32)">
            <summary>
            Инициализирует сервер.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServer.XmlRequest(System.Xml.XmlDocument)">
            <summary>
            Выполняет запрос к серверу.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServer.XmlRequest(System.String)">
            <summary>
            Выполняет запрос к серверу.
            </summary>
            <param name="requestXml"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServer.Reload">
            <summary>
            Перезапускает сервер.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.CentralServer.CentralServer.ListeningPort">
            <summary>
            Возвращает номер порта TCP, на котором работает сервер.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.CentralServer.CentralServerClient">
            <summary>
            Обеспечивает доступ к центральному серверу данных.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CentralServer.CentralServerClient.DefaultPort">
            <summary>
            Возвращает номер порта TCP центрального сервера по умолчанию.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerClient.Query(System.Xml.XmlDocument,System.String)">
            <summary>
            Выполняет запрос к серверу данных.
            </summary>
            <param name="request"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerClient.Query(System.String,System.String)">
            <summary>
            Выполняет запрос к серверу данных.
            </summary>
            <param name="requestXml"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.CentralServer.CentralServerClient.Host">
            <summary>
            Возвращает или устанавливает имя компьютера, на котором функционирует центральный сервер данных.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.CentralServer.CentralServerClient.Port">
            <summary>
            Возвращает или устанавливает номер порта, на котором функционирует центральный сервер данных.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.CentralServer.CentralServerClient.Connected">
            <summary>
            Возвращает или устанавливает признак постоянного соединения с центральным сервером данных.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.CentralServer.CentralServerConnection">
            <summary>
            Подсистема взаимодействия с центральным сервером ИнМеты.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.#ctor(Integro.InMeta.Runtime.CentralServer.CentralServer,System.String)">
            <summary>
            Инициализирует подсистему взаимодействия с центральным сервером.
            </summary>
            <param name="owner">Владелец соединения.</param>
            <param name="address">Сетевой адрес центрального сервера.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.Dispose(System.Boolean)">
            <summary>
            Завершает работу с центральным сервером.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.Dispose">
            <summary>
            Завершает работу с сеансом.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GenerateCustomId(System.String,System.String)">
            <summary>
            Генерирует новый прикладной идентификатор.
            </summary>
            <param name="appId">Идентификатор приложения.</param>
            <param name="generatorName">Название прикладного счетчика.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GenerateCustomIds(System.String,System.String,System.Int32)">
            <summary>
            Генерирует набор новых прикладных идентификаторов.
            </summary>
            <param name="appId">Идентификатор приложения.</param>
            <param name="generatorName">Название прикладного счетчика.</param>
            <param name="count">Требуемое количество идентификаторов.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.ReleaseCustomIds(System.String,System.String,System.Int32[])">
            <summary>
            Освобождает сгенерированные ранее прикладные идентификаторы.
            </summary>
            <param name="appId">Идентификатор приложения.</param>
            <param name="generatorName">Название прикладного счетчика.</param>
            <param name="ids">Освобождаемые прикладные идентификаторы.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GenerateRegNo(System.String)">
            <summary>
            Генерирует новый реестровый номер.
            </summary>
            <param name="appId">Идентификатор приложения.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GenerateUpdateLogId(System.String,System.Int32@,System.Int32@)">
            <summary>
            Генерирует идентификатор для журнала изменений.
            </summary>
            <param name="appId"></param>
            <param name="majorId"></param>
            <param name="minorId"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GetCustomIdGenerators(System.String)">
            <summary>
            Возвращает список генераторов предметных идентификаторов.
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GenerateId(System.String)">
            <summary>
            Генерирует идентификатор.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GenerateIds(System.String,System.Int32)">
            <summary>
            Генерирует указанное количество идентификаторов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GetIdGroups(System.String)">
            <summary>
            Возвращает список групп идентификаторов для указанного приложения.
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.GetIdConverter(System.String,Integro.InMeta.Runtime.IdGroupList)">
            <summary>
            Возвращает преобразователь идентификаторов.
            </summary>
            <param name="appId"></param>
            <param name="sourceGroups"></param>
            <returns></returns>
            <remarks>Попутно выполняется пополнение таблицы групп в БД приложения.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.CentralServer.CentralServerConnection.PermanentConnection">
            <summary>
            Возвращает/устанавливает признак постоянного подключения к центральному серверу.
            </summary>
            <remarks>Если данный признак сброшен, подключение к серверу производится по необходимости 
            при вызове функций.</remarks>
        </member>
        <member name="T:Integro.InMeta.Runtime.CentralServer.CustomIdGenerator">
            <summary>
            Содержит информацию о генераторе предметных идентификаторов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CentralServer.CustomIdGenerator.Name">
            <summary>
            Название генератора.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CentralServer.CustomIdGenerator.LastNumber">
            <summary>
            Значение последнего сгенерированного идентификатора.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CentralServer.CustomIdGenerator.#ctor(System.String,System.Int32)">
            <summary>
            Инициализирует информацию о генераторе.
            </summary>
            <param name="name"></param>
            <param name="lastNumber"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.CodeGeneratorOptions">
            <summary>
            Управляет некоторыми аспектами генерации исходного кода.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CodeGeneratorOptions.GenerateWebPage">
            <summary>
            Вызывает генерацию базового класса для прикладных Web-страниц.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CodeGeneratorOptions.GenerateWebService">
            <summary>
            Вызывает генерацию базового класса для прикладных Web-служб.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CodeGeneratorOptions.GenerateConditionBuilder">
            <summary>
            Вызывает генерацию класса для построения условий отбора.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.CodeGenerator">
            <summary>
            Генерирует определения прикладных классов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CodeGenerator.Application">
            <summary>
            Содержит ссылку на приложение, для которого будет генерироваться исходный текст.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CodeGenerator.Options">
            <summary>
            Содержит параметры генерации исходного кода.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.#ctor(Integro.InMeta.Runtime.DataApplication,Integro.InMeta.Runtime.CodeGeneratorOptions)">
            <summary>
            Инициализирует генератор исходных текстов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateHeader(System.Text.StringBuilder)">
            <summary>
            Генерирует текст заголовка генерируемой сборки.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateFooter(System.Text.StringBuilder)">
            <summary>
            Генерирует завершающий текст сборки.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateClasses(Integro.InMeta.Runtime.MetadataClassList,System.Text.StringBuilder)">
            <summary>
            Генерирует исходный текст для указанных классов.
            </summary>
            <param name="classes"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateConditionBuilder(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует построитель условия отбора объектов.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateClass(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует исходный текст определения класса.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateIList(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует интерфейс списка.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateList(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует класс списка.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateChildList(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует класс списка дочерних объектов.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateLinkProperty(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует класс свойства связи.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateMeta(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует класс описания прикладных метаданных.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateStorage(Integro.InMeta.Runtime.MetadataClass,System.Text.StringBuilder)">
            <summary>
            Генерирует хранилище объектов.
            </summary>
            <param name="cls"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateSession(Integro.InMeta.Runtime.MetadataClassList,System.Text.StringBuilder)">
            <summary>
            Генерирует сеанс.
            </summary>
            <param name="classes"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateAplication(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Генерирует приложение.
            </summary>
            <param name="sb"></param>
            <param name="id"></param>
            <param name="centralAddress"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateWebPage(System.Text.StringBuilder)">
            <summary>
            Генерирует базовый базовый класс для прикладных Web-страниц.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.CodeGenerator.GenerateWebService(System.Text.StringBuilder)">
            <summary>
            Генерирует базовый базовый класс для прикладных Web-страниц.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.FileAttachment">
            <summary>
            Предоставляет доступ к прикрепленному файлу.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.FileAttachment.Owner">
            <summary>
            Возвращает коллекцию прикрепленных файлов, которой принадлежит данный файл.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.FileAttachment.FileName">
            <summary>
            Возвращает имя прикрепленного файла.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.FileAttachment.GetFile(System.String)">
            <summary>
            Копирует содержимое прикрепленного файла в файл с указанным именем.
            </summary>
            <param name="dstFileName">Полное имя файла, включая путь, в который будет скопировано содержимое прикрепленного файла.</param>
            <remarks>Если файл с указанным именем существует, его содержимое будет перезаписано.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.FileAttachment.SetFile(System.String)">
            <summary>
            Копирует содержимое указанного файла в прикрепленный файл.
            </summary>
            <param name="srcFileName">Имя существующего файла, включая полный путь, содержимое которого будет скопировано в прикрепленный файл.</param>
            <remarks>Текущее содержимое прикрепленного файла будет перезаписано.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.FileAttachment.Delete">
            <summary>
            Удаляет прикрепленный файл.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.FileAttachment.CopyFrom(Integro.InMeta.Runtime.FileAttachment)">
            <summary>
            Заменяет прикрепленный файл другим прикрепленным файлом.
            </summary>
            <param name="srcAttachment"></param>
        </member>
        <member name="P:Integro.InMeta.Runtime.FileAttachment.Caption">
            <summary>
            Возвращает/устанавливает заголовок прикрепленного файла.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.FileAttachment.Description">
            <summary>
            Возвращает/устанавливает описание прикрепленного файла.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.FileAttachment.IsModified">
            <summary>
            Возвращает признак того, что параметры прикрепленного файла были изменены.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ObjectFileAttachments">
            <summary>
            Предоставляет доступ к прикрепленным файлам реестрового объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectFileAttachments.Object">
            <summary>
            Возвращает объект, к которому относится список прикрепленных файлов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectFileAttachments.Find(System.String)">
            <summary>
            Выполняет поиск прикрепленного файла по имени.
            </summary>
            <param name="fileName"></param>
            <returns>Возвращает найденный прикрепленный файл или <c>null</c>, если файл с указанным именем не найден.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectFileAttachments.Ensure(System.String)">
            <summary>
            Возвращает прикрепленный файл с указанным именем файла.
            </summary>
            <param name="fileName"></param>
            <returns>Если список приложений уже содержит прикрепленный файл с указанным именем, 
            то будет возвращен существующий файл.
            В противном случае будет добавлен новый файл с указанным именем.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectFileAttachments.GetEnumerator">
            <summary>
            Возвращает объект для перебора прикрепленных файлов.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectFileAttachments.DeleteAll">
            <summary>
            Удаляет все прикрепленные файлы.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ObjectFileAttachments.Count">
            <summary>
            Возвращает количество прикрепленных файлов.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ObjectFileAttachments.Item(System.Int32)">
            <summary>
            Возвращает прикрепленный файл по порядковому номеру.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataId">
            <summary>
            Представляет идентификатор реестрового объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataId.FValue">
            <summary>
            Хранить идентификатор в виде двенадцатисимвольного массива
            ASCII-кодов строкового представления идентификатора.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataId.FToStringBuf">
            <summary>
            Используется в целях оптимизации при преобразовании
            идентификатора в строку.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataId.Empty">
            <summary>
            Представляет пустой идентификатор.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.#ctor(System.String)">
            <summary>
            Инициализирует идентификатор на основе строкового представления.
            </summary>
            <param name="s">Строковое представление идентификатора.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.#ctor(Integro.InMeta.Runtime.DataId)">
            <summary>
            Инициализирует копию идентификатора.
            </summary>
            <param name="id">Исходный идентификатор.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.#ctor(System.Int32,System.Int32)">
            <summary>
            Конструирует идентификатор на основе двух составляющих - локального номера группы и номера внутри группы.
            </summary>
            <param name="groupLocalId"></param>
            <param name="number"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.GetHashCode">
            <summary>
            Вычисляет хэш-код идентификатора.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.ToString">
            <summary>
            Преобразует идентификатор в строку.
            </summary>
            <returns>Строковое представление идентификатора.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.CompareTo(Integro.InMeta.Runtime.DataId)">
            <summary>
            Сравнивает данный идентификатор с другим.
            </summary>
            <param name="id">Идентификатор для сравнения с данным.</param>
            <returns>Возвращает 0, если идентификаторы совпадают;
            -1, если данный идентификатор меньше заданного;
            1, если данный идентификатор больше заданного.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.Equals(System.Object)">
            <summary>
            Проверяет данный идентификатор с заданным объектом на равенство.
            </summary>
            <param name="obj">Объект <c>string</c> или <c>DataId</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.CompareTo(System.Object)">
            <summary>
            Сравнивает данный идентификатор с другим.
            </summary>
            <param name="obj">Объект <c>string</c> или <c>DataId</c>, 
            содержащий идентификатор для сравнения с данным.</param>
            <returns>Возвращает 0, если идентификаторы совпадают;
            -1, если данный идентификатор меньше заданного;
            1, если данный идентификатор больше заданного.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.Split(System.String,System.Char)">
            <summary>
            Формирует массив идентификаторов на основе строки,
            содержащей список идентификаторов, разделенных
            указанным символом.
            </summary>
            <param name="list">Строка со списком идентификаторов.</param>
            <param name="separator">Символ-разделитель.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.Join(System.String,Integro.InMeta.Runtime.DataId[])">
            <summary>
            Формирует сроку, содержащую список идентификаторов.
            </summary>
            <param name="separator">Разделитель.</param>
            <param name="ids">Массив идентификаторов.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.Join(System.String,Integro.InMeta.Runtime.IDataObjectList)">
            <summary>
            Формирует сроку, содержащую список идентификаторов указанных объектов.
            </summary>
            <param name="separator">Разделитель.</param>
            <param name="objs">Список объектов.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.Compare(Integro.InMeta.Runtime.DataId,Integro.InMeta.Runtime.DataId)">
            <summary>
            Сравнивает два идентификатора.
            </summary>
            <param name="id1"></param>
            <param name="id2"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.op_Equality(Integro.InMeta.Runtime.DataId,Integro.InMeta.Runtime.DataId)">
            <summary>
            Проверяет идентификаторы на равенство.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.op_Inequality(Integro.InMeta.Runtime.DataId,Integro.InMeta.Runtime.DataId)">
            <summary>
            Проверяет идентификаторы на неравенство.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataId.TryExtractParts(System.Int32@,System.Int32@)">
            <summary>
            Возвращает две составляющие идентификатора.
            </summary>
            <param name="localGroupId"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataId.IsEmpty">
            <summary>
            Возвращает признак того, что данный идентификатор является пустым.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.IdGroup">
            <summary>
            Группа идентификаторов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.IdGroup.GlobalId">
            <summary>
            Возвращает глобальный идентификатор группы.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.IdGroup.LocalId">
            <summary>
            Возвращает сокращенный идентификатор группы в рамках изолированного хранилища.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdGroup.#ctor(System.String,System.Int32)">
            <summary>
            Инициализирует группу.
            </summary>
            <param name="globalId"></param>
            <param name="localId"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.IdGroupList">
            <summary>
            Список групп идентификаторов, относящихся к одному хранилищу.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdGroupList.Add(Integro.InMeta.Runtime.IdGroup)">
            <summary>
            Добавляет группу в список.
            </summary>
            <param name="idGroup"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdGroupList.FindByGlobalId(System.String)">
            <summary>
            Выполняет поиск группы по заданному глобальному идентификатору.
            </summary>
            <param name="globalId"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdGroupList.Load(System.Xml.XmlNodeList)">
            <summary>
            Загружает список из набора элементов XML.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdGroupList.Load(System.Xml.XmlNode)">
            <summary>
            Загружает список из набора дочерних элементов с названием <c>IdGroup</c>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdGroupList.Save(System.Xml.XmlElement)">
            <summary>
            Сохраняет список в виде набора элементов XML.
            </summary>
            <param name="parentNode"></param>
        </member>
        <member name="P:Integro.InMeta.Runtime.IdGroupList.Count">
            <summary>
            Возвращает количество групп в списке.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.IdGroupList.Item(System.Int32)">
            <summary>
            Возвращает группу по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.IdConverter">
            <summary>
            Выполняет преобразование сокращенной формы записи идентификаторов при 
            миграции из одного хранилища в другое.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdConverter.AddGroupConverter(System.Int32,System.Int32)">
            <summary>
            Добавляет преобразование локальных номеров групп.
            </summary>
            <param name="sourceLocalId"></param>
            <param name="destinationLocalId"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdConverter.ConvertId(Integro.InMeta.Runtime.DataId)">
            <summary>
            Выполняет преобразование идентификатора.
            </summary>
            <param name="sourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdConverter.Load(System.Xml.XmlNodeList)">
            <summary>
            Загружает таблицу соответствия локальных номеров групп из набора элементов XML.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdConverter.Load(System.Xml.XmlNode)">
            <summary>
            Загружает таблицу соответствия локальных номеров групп из дочерних элементов XML с названием "IdGroupConverter".
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.IdConverter.Save(System.Xml.XmlElement)">
            <summary>
            Сохраняет таблицу соответствия локальных номеров групп в виде набора дочерних элементов XML с названием "IdGroupConverter".
            </summary>
            <param name="parentNode"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.IndexSet">
            <summary>
            Предоставляет функциональность множества целых чисел.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.IndexSet.Equals(Integro.InMeta.Runtime.IndexSet)">
            <summary>
            Проверяет на совпадение данного множества с указанного.
            </summary>
            <param name="indexSet">Множество для проверки.</param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.IndexSet.Item(System.Int32)">
            <summary>
             Включает/исключает индекс в множество.
            </summary>
            <param name="index"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:Integro.InMeta.Runtime.IndexSet.IsEmpty">
            <summary>
             Возвращает признак того, что множество не содержит ни одного индекса.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.InMetaException">
            <summary>
             Ошибка среды выполнения ИнМета.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.InMetaException.DetailsHtml">
            <summary>
             Подробное описание ошибки в формате Html.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.InMetaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализация ошибки.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.InMetaException.#ctor(System.String)">
            <summary>
             Инициализация ошибки.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.InMetaException.#ctor(System.String,System.Exception)">
            <summary>
             Инициализация ошибки.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.InMetaException.#ctor(System.String,System.String)">
            <summary>
             Инициализация ошибки.
            </summary>
            <param name="message"></param>
            <param name="detailsHtml"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.InMetaException.#ctor(System.String,System.String,System.Exception)">
            <summary>
             Инициализация ошибки.
            </summary>
            <param name="message"></param>
            <param name="detailsHtml"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.InMetaException.#ctor(Scripting.ScriptControl,Integro.InMeta.Runtime.ScriptErrorOperation,System.String,System.Object[])">
            <summary>
             Инициализация ошибки скрипта.
            </summary>
            <param name="scriptControl"></param>
            <param name="errorOperation"></param>
            <param name="sourceFormat"></param>
            <param name="sourceFormatParameters"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.ChildsLoader">
            <summary>
            Загрузчик агрегатов.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ObjectPartLoader">
            <summary>
            Базовый класс загрузки части объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectPartLoader.FieldName">
            <summary>
            Имена полей, необходимых загрузчику.
            Должны быть проинициализированы в конструкторе.
            Если загрузчику не нужны поля, он должен оставить значения <c>null</c>.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectPartLoader.ExFieldName">
            <summary>
            Имена полей, необходимых загрузчику.
            Должны быть проинициализированы в конструкторе.
            Если загрузчику не нужны поля, он должен оставить значения <c>null</c>.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectPartLoader.Load(Integro.InMeta.Runtime.DataObject,System.Object,System.Object,Integro.InMeta.Runtime.LoadContext)">
            <summary>
            Произвести загрузку данных объекта.
            Параметры <c>value</c> и <c>valueEx</c> содержат значения полей
            в соответствии с именами <c>FieldName</c> и <c>FieldNameEx</c>
            для объекта <c>obj</c>.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ChildsLoader.ChildRef">
            <summary>
            Ссылка на дочерний класс, для которой определен данный загрузчик.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ChildsLoader.RefLoader">
            <summary>
            Загрузчик списка дочерних объектов.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataPropertyLoader">
            <summary>
            Загрузчик свойства, являющегося простым атрибутом (<c>IsData</c>).
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataPropertyLoader.PropertyMetadata">
            <summary>
            Метаданные свойства.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.LinkPropertyLoader">
            <summary>
            Загрузчик связанного или родительского объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.LinkPropertyLoader.Association">
            <summary>
            Метаданные связи, для которой определен данный загрузчик.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.LinkPropertyLoader.RefLoaders">
            <summary>
            Массив планов загрузчиков списков для разных вариантов связи.
            Если для отдельных вариантов связи загрузка не предусмотрена,
            то соответствующий элемент массива равен <c>null</c>.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.LinkPropertyLoader.Refs">
            <summary>
            Список вариантов связи (то же, что и Association.Refs).
            Поле введено для оптимизации.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.IDataObjectList">
            <summary>
            Определяет набор методов для индексированного доступа к
            списку реестровых объектов.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.IDataObjectList.Count">
            <summary>
            Возвращает количество объектов в списке.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.IDataObjectList.Item(System.Int32)">
            <summary>
            Возвращает объект по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObjectList">
            <summary>
            Содержит список реестровых объектов в виде динамического массива.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectList.CheckItem(System.Object)">
            <summary>
            Проверяет объект, передаваемый в качестве элемента списка
            на допустимость типа.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectList.GetAcceptableType">
            <summary>
            Возвращает допустимый тип элемента списка.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectList.#ctor">
            <summary>
            Инициализирует пустой список.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectList.#ctor(System.Int32)">
            <summary>
            Инициализирует пустой список и резервирует потенциальную 
            емкость списка в указанное количество элементов.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectList.#ctor(System.Collections.ICollection)">
            <summary>
            Инициализирует список и помещает в него элементы 
            из указанной коллекции.
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectList.Sort(System.String)">
            <summary>
            Выполняет сортировку списка по значениям указанных свойств.
            </summary>
            <param name="propNames">Список названий свойств, 
            разделенных запятой.</param>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObjectList.Item(System.Int32)">
            <summary>
            Возвращает/устанавливает элемент списка по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObjectChildList">
            <summary>
            Обеспечивает доступ к списку дочерних объектов (агрегатов).
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectChildList.FItems">
            <summary>
            Хранит массив дочерних объектов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectChildList.Object">
            <summary>
            Хранит родительский объект, которому принадлежит данный список.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectChildList.ChildRef">
            <summary>
            Хранит метаданные списка дочерних объектов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectChildList.FIsComplete">
            <summary>
            Хранит признак того, что список "завершен".
            </summary>
            <remarks>Список считается завершенным в двух случаях:
            <list>
            <item>если он был полностью загружен посредством плана загрузки;</item>
            <item>если он принадлежит новому объекту.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectChildList.FIsModified">
            <summary>
            Хранит признак того, что список был модифицирован во время сеанса.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.CopyTo(System.Array,System.Int32)">
            <summary>Реализация интерфейса <c>ICollection</c>.</summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataChildRef)">
            <summary>
            Инициализирует список дочерних объектов указанного объекта 
            для указанного класса дочерних объектов.
            </summary>
            <param name="owner">Объект, которому принадлежит список.</param>
            <param name="childRef">Метаданные ссылки на дочерний класс.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.SetCompleted(System.Boolean)">
            <summary>
            Устанавливает признак завершенности списка.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.CheckComplete">
            <summary>
            Гарантирует, что после вызова метода список будет завершен.
            </summary>
            <remarks>Если список не завершен, произойдет загрузка дочерних объектов.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.SetModified(System.Boolean)">
            <summary>
            Устанавливает признак изменения списка.
            Если происходит установка признака и до этого признак 
            не был установлен, то объект-владелец будет помещен в 
            список кандидатов на обновление.
            </summary>
            <param name="value">Новое значение признака.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.AppendChild(Integro.InMeta.Runtime.DataObject)">
            <summary>
            Добавляет новый дочерний объект в список.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.RemoveChild(Integro.InMeta.Runtime.DataObject,System.Boolean)">
            <summary>
            Удаляет дочерний объект из списка.
            </summary>
            <param name="child"></param>
            <param name="checkWriting"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.AddNew">
            <summary>
            Создает новый дочерний объект и добавляет его в список.
            </summary>
            <returns>Вновь созданный дочерний объект.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.Commit">
            <summary>
            Фиксирует изменения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.Rollback">
            <summary>
            Отменяет изменения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.DropCache">
            <summary>
            Очищает список ссылок на дочерние объекты и переводит список в состояние "не заполнен".
            В списке остаются только ссылки на объекты, помещенные в список дочерних в рамках сеанса.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.DeleteAll">
            <summary>
            Удаляет из реестровой системы все дочерние объекты,
            содержащиеся в данном списке.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.GetEnumerator">
            <summary>
            Возвращает объект-перечислитель списка.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.ToArray">
            <summary>
            Возвращает содержимое списка в виде массива.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectChildList.Sort(System.String)">
            <summary>
            Сортирует объекты в списке по значениям указанных свойств.
            </summary>
            <param name="propNames">Список свойств, разделенный запятыми.</param>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObjectChildList.SyncRoot">
            <summary>Реализация интерфейса <c>ICollection</c>.</summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObjectChildList.IsSynchronized">
            <summary>Реализация интерфейса <c>ICollection</c>.</summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObjectChildList.Session">
            <summary>
            Возвращает сеанс, которому принадлежит реестровый объект.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObjectChildList.Count">
            <summary>
            Возвращает количество объектов в списке.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObjectChildList.Item(System.Int32)">
            <summary>
            Возвращает объект списка по индексу.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObjectChildList.First">
            <summary>
            Возвращает первый элемент списка или нулевой объект, если список пуст.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataException">
            <summary>
            Содержит информацию об ошибке серверной среды выполнения ИнМета
            при работе с данными реестровых объектов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataException.#ctor">
            <summary>
            Инициализирует экземпляр исключения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Служебный конструктор.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataException.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр исключения текстом сообщения об ошибке.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует экземпляр исключения текстом сообщения об ошибке и
            объектом исключения предыдущего уровня.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ObjectSessionState">
            <summary>
            Сеансовое состояние объекта.
            Отражает следующие характеристики копии реестрового объекта в памяти сеанса:
            <list type="bullet">
            <item>Признак того, существовал ли объект до начала сеанса. Критерием существования объекта до начала сеанса служит факт наличия данных объекта в БД на момент проверки.</item>
            <item>Признак того, что объект был создан в процессе сеанса.</item>
            <item>Признак того, что объект был изменен в процессе сеанса. Критерием изменения является факт записи значений простых свойств и связей. Любая запись свойства считается изменением, независимо от того, изменилось ли значение свойства.</item>
            <item>Признак того, что объект был удален в рамках сеанса.</item>
            </list>
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.New">
            <summary>
            Реестровый объект был создан в рамках сеанса.
            Флаги <c>New</c> и <c>Existing</c> взаимно исключающие.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.Existing">
            <summary>
            Реестровый объект существовал до начала сеанса.
            Флаги <c>New</c> и <c>Existing</c> взаимно исключающие.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.Error">
            <summary>
            Реестровый объект не существовал до начала сеанса, 
            однако появился в памяти сеанса как существовавший. 
            Объект считается удаленным до начала сеанса. 
            Любые операции над ним приводят к генерации ошибки.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.PropertiesModified">
            <summary>
            Значения одного или нескольких свойств объекта
            были изменены в рамках сеанса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.ChildsModified">
            <summary>
            В рамках сеанса были изменены один или несколько списков дочерних объектов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.Deleted">
            <summary>
            Реестровый объект был удален в рамках сеанса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.NullObject">
            <summary>
            Реестровый объект является типизированным нулевым объектом.
            Любые операции над ним выполняются в соответствии с правилами 
            работы с нулевыми объектами.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ObjectSessionState.AttachmentsModified">
            <summary>
            Врамках сеанса были внесены изменения в прикрепленные файлы.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObject">
            <summary>
            Предоставляет доступ к свойствам, дочерним объектам и прочим данным 
            реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.#ctor">
            <summary>
            Инициализирует реестровый объект.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.CreatePropertyInstance(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Создает экземпляр объекта доступа к свойству реестрового объекта.
            </summary>
            <param name="propertyMetadata">Метаданные свойства.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.EnsurePropertyInstance(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Обеспечивает наличие массива <c>FShared.Properties</c> и наличие в нем
            объект доступа к заданному свойству.
            </summary>
            <param name="propertyMetadata">Метаданные свойства.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.LoadPropertyValue(Integro.InMeta.Runtime.MetadataProperty,System.Object,System.Object,Integro.InMeta.Runtime.LoadContext)">
            <summary>
            Загружает значение свойства из БД.
            </summary>
            <param name="propertyMetadata">Метаданные свойства.</param>
            <param name="value">Значение, считанное из БД.</param>
            <param name="exValue">Дополнительное значение (значение 
            селектора связи для ассоциаций).</param>
            <param name="loadContext"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SavePropertyValue(Integro.InMeta.Runtime.MetadataProperty,System.Object@,System.Object@)">
            <summary>
            Возвращает значение свойства, подготовленное для записи в БД.
            </summary>
            <param name="metadataProperty">Метаданные свойства.</param>
            <param name="value">Значение свойства.</param>
            <param name="exValue">Дополнительное значение (значение 
            селектора связи для ассоциаций).</param>
            <returns>Возвращает количество заполненных значений (1 или 2).</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.LoadNotAssignedProperties">
            <summary>
            Производит загрузку значений из БД для тех свойств,
            значения которых не присвоены.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SessionStateContainsAny(Integro.InMeta.Runtime.ObjectSessionState)">
            <summary>
            Возвращает признак того, что сеансовое состояние
            содержит хотя бы один флаг из <c>states</c>.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SessionStateContainsAll(Integro.InMeta.Runtime.ObjectSessionState)">
            <summary>
            Возвращает признак того, что сеансовое состояние
            содержит все флаги из <c>states</c>.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.IncludeSessionState(Integro.InMeta.Runtime.ObjectSessionState)">
            <summary>
            Устанавливает флаги сеансового состояния, заданные в <c>state</c>.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.ExcludeSessionState(Integro.InMeta.Runtime.ObjectSessionState)">
            <summary>
            Сбрасывает флаги сеансового состояния, заданные в <c>state</c>.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetSessionState(Integro.InMeta.Runtime.ObjectSessionState)">
            <summary>
            Устанавливает новое значение сеансового состояния.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.InvalidStateForOperation(System.String)">
            <summary>
            Генерирует ошибку о недопустимом текущем сеансовом состоянии
            для выполнения указанной операции.
            </summary>
            <param name="errorText">Текст ошибки.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.IsPropertyModified(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Проверяет, было ли изменено значение указанного свойства в 
            ходе текущего сеанса.
            </summary>
            <param name="propertyMetadata">Метаданные свойства.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.IsPropertyAssigned(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Проверяет, находится или нет значение указанного свойства в 
            памяти (кэше) текущего сеанса.
            </summary>
            <param name="propertyMetadata">Метаданные свойства.</param>
            <returns></returns>
            <remarks>Значение находится в памяти сеанса, если оно было загружено  
            из БД методом Query. Кроме того, значение свойства будет присутствовать 
            в памяти сеанса после чтения или установки его значения.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SelectSingleProperty(System.String)">
            <summary>
            Возвращает свойство согласно заданному навигационному пути.
            </summary>
            <param name="path">Составное название свойства.</param>
            <returns>Найденное свойство или <c>null</c>, если навигация по заданному маршруту невозможна.</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetString(System.String,System.String)">
            <summary>
            Возвращает значение свойства строкового типа.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.NeedString(System.String)">
            <summary>
            Возвращает не пустое значение свойства, преобразованное к строке.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Не пустое значение свойства, заданного параметром <c>propertyPath</c>.
	При невозможности получения не пустого значения свойства генерируется исключение:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetString(System.String)">
            <summary>
            Возвращает значение свойства, преобразованное к строке.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Значением по умолчанию принимается пустая строка.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetString(System.String,System.String)">
            <summary>
            Устанавливает значение свойства на основе строкового значения.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="value">Новое значение свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.NeedInteger(System.String)">
            <summary>
            Возвращает не пустое значение свойства, преобразованное к целочисленному типу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Не пустое значение свойства, заданного параметром <c>propertyPath</c>.
	При невозможности получения не пустого значения свойства генерируется исключение:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetInteger(System.String,System.Int32)">
            <summary>
            Возвращает значение свойства, преобразованное к целочисленному типу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetInteger(System.String)">
            <summary>
            Возвращает значение свойства, преобразованное к целочисленному типу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Значением по умолчанию принимается 0.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetInteger(System.String,System.Int32)">
            <summary>
            Устанавливает значение свойства на основе значения целочисленного типа.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="value">Новое значение свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.NeedDouble(System.String)">
            <summary>
            Возвращает не пустое значение свойства, преобразованное к числу с плавающей точкой.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Не пустое значение свойства, заданного параметром <c>propertyPath</c>.
	При невозможности получения не пустого значения свойства генерируется исключение:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Если тип целевого свойства не является числом с плавающей запятой, будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetDouble(System.String,System.Double)">
            <summary>
            Возвращает значение свойства, преобразованное к числу с плавающей запятой.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetDouble(System.String)">
            <summary>
            Возвращает значение свойства, преобразованное к числу с плавающей запятой.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Значением по умолчанию принимается 0.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetDouble(System.String,System.Double)">
            <summary>
            Устанавливает значение свойства на основе числа с плавающей запятой.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="value">Новое значение свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.NeedDecimal(System.String)">
            <summary>
            Возвращает не пустое значение свойства, преобразованное к десятичному числа.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Не пустое значение свойства, заданного параметром <c>propertyPath</c>.
	При невозможности получения не пустого значения свойства генерируется исключение:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetDecimal(System.String,System.Decimal)">
            <summary>
            Возвращает значение свойства, преобразованное к десятичному числу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetDecimal(System.String)">
            <summary>
            Возвращает значение свойства, преобразованное к десятичному числу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Значением по умолчанию принимается 0.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetDecimal(System.String,System.Decimal)">
            <summary>
            Устанавливает значение свойства на основе десятичного числа.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="value">Новое значение свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.NeedBoolean(System.String)">
            <summary>
            Возвращает не пустое значение свойства, преобразованное к логическому типу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Не пустое значение свойства, заданного параметром <c>propertyPath</c>.
	При невозможности получения не пустого значения свойства генерируется исключение:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetBoolean(System.String,System.Boolean)">
            <summary>
            Возвращает значение свойства, преобразованное к логическому типу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetBoolean(System.String)">
            <summary>
            Возвращает значение свойства, преобразованное к логическому типу.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Значением по умолчанию принимается <c>false</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetBoolean(System.String,System.Boolean)">
            <summary>
            Устанавливает значение свойства на основе значения логического типа.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="value">Новое значение свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.NeedDateTime(System.String)">
            <summary>
            Возвращает не пустое значение свойства, преобразованное к типу даты/времени.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Не пустое значение свойства, заданного параметром <c>propertyPath</c>.
	При невозможности получения не пустого значения свойства генерируется исключение:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetDateTime(System.String,System.DateTime)">
            <summary>
            Возвращает значение свойства, преобразованное к типу даты/времени.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetDateTime(System.String)">
            <summary>
            Возвращает значение свойства, преобразованное к типу даты/времени.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <returns>
	Значение свойства, заданного параметром <c>propertyPath</c>, или значение по умолчанию.
	Значение по умолчанию возвращается в следующих случаях:
	<list>
	<item>Если невозможно выполнить навигацию до целевого объекта, заданного маршрутом достпа <c>propertyPath</c>.</item>
	<item>Если свойство целевого объекта содержит пустое значение (<c>IsNull</c>).</item>
	</list>
	</returns>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Значением по умолчанию принимается <c>DateTime.MinValue</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetDateTime(System.String,System.DateTime)">
            <summary>
            Устанавливает значение свойства на основе значения типа даты/времени.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="value">Новое значение свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetLink(System.String)">
            <summary>
            Возвращает значение ассоциативного свойства.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Если тип целевого свойства не является ассоциацией, будет сгенерировано исключение.</remarks>
            <remarks>При невозможности навигации до целевого объекта будет возвращен нетипизированный нулевой объект.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SetLink(System.String,Integro.InMeta.Runtime.DataObject)">
            <summary>
            Устанавливает значение ассоциативного свойства.
            </summary>
            <param name="propertyPath">Составное название свойства.</param>
            <param name="value">Новое значение свойства.</param>
            <remarks>
<p>Составное название свойства может содержать как название свойства, так и маршрут доступа к свойству относительно исходного объекта.
Маршрут содержит перечень шагов, разделенных символом '.'. 
Каждый шаг может быть либо названием ассоциативного свойства, либо названием класса агрегатов. В названиях классов агрегатов вместо символа '/' следует использовать символ '_'.
Последний шаг маршрута должен быть названием свойства в целевом объекте.
</p>
<p>При использовании в маршруте агрегатов будет производится переход на первый агрегат (порядок следования агрегатов не определен).</p>
		</remarks><example>Следующий пример демонстрирует использование составного названия свойства для извлечения информации о названии улицы первого адреса здания.
		<code>
		DataObject building = session["Constr/Building"][buildingId];
		string firtsAddressStreetName = building.GetString("General_PostAddr.Street.Name");
		</code>
		</example>
            <remarks>Если тип целевого свойства не является ассоциацией, будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetChilds(Integro.InMeta.Runtime.MetadataChildRef)">
            <summary>
            Возвращает список дочерних объектов на основе объекта 
            метаданных списка дочерних объектов.
            </summary>
            <param name="childRef">Метаданные списка дочерних объектов.</param>
            <returns>Список дочерних объектов.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetChilds(System.String)">
            <summary>
            Возвращает список дочерних объектов по названию класса дочерних объектов.
            </summary>
            <param name="childClassName">Названи класса дочерних объектов.</param>
            <returns>Список дочерних объектов.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.RemoveChild(Integro.InMeta.Runtime.DataObject,System.Boolean)">
            <summary>
            Удалить дочерний объект из списка.
            </summary>
            <param name="child">Дочерний объект.</param>
            <param name="checkWriting"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SameObject(Integro.InMeta.Runtime.DataObject)">
            <summary>
            Проверяет, является ли заданный объект тем же реестровым объектом, 
            что и данный.
            </summary>
            <param name="obj">Объект для проверки.</param>
            <returns>Признак того, что заданный объект является тем же реестровым объектом, 
            что и данный.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SameObjects(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.DataObject)">
            <summary>
            Проверяет, являются два объекта одним реестровым объектом.
            </summary>
            <param name="obj1">Первый объект для проверки.</param>
            <param name="obj2">Второй объект для проверки.</param>
            <returns>Признак того, что объекты являются одним и тем же 
            реестровым объектом.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetView(System.String)">
            <summary>
            Возвращает текст представления объекта.
            </summary>
            <param name="viewName">Название представления.</param>
            <returns>Текст представления объекта.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetViewHtml(System.String)">
            <summary>
            Возвращает текст представления объекта в формате HTML.
            </summary>
            <param name="viewName">Название представления.</param>
            <returns>Текст представления объекта в формате HTML.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Delete">
            <summary>
            Удаляет реестровый объект из реестровой системы.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetPropertyIndexSet(Integro.InMeta.Runtime.PropertyStateFilter)">
            <summary>
            Возвращает множество индексов свойств согласно заданному критерию.
            </summary>
            <param name="filter">Критерий отбора свойств.</param>
            <returns>Множество индексов свойств.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Commit">
            <summary>
            Фиксирует все изменения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Rollback">
            <summary>
            Отменяет все изменения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.DropCache">
            <summary>
            Сбрасывает все загруженные значения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.CompareTo(System.Object)">
            <summary>
            Сравнивает объект с другим объектом.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Assigned(Integro.InMeta.Runtime.DataObject)">
            <summary>
            Возвращает признак того, что указанный объект не является пустой ссылкой (null) или нулевым объектом.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.GetObjectRef(Integro.InMeta.Runtime.DataObject)">
            <summary>
            Возвращает текстовую ссылку на объект.
            </summary>
            <param name="obj"></param>
            <returns>Если объект является пустой ссылкой (null) или нетипизированным нулевым объектом, будет возвращена пустая строка.<br></br>
            Если объект является типизированным нулевым объектом, будет возвращена строка в формате ":класс".<br></br>
            В противном случае будет возвращена строка в формате "идентификатор:класс".</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.Item(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Возвращает объект доступа к значению указанного свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.Item(System.String)">
            <summary>
            Возвращает объект доступа к значению свойства с заданным названием.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.SessionState">
            <summary>
            Возвращает сеансовое состояние объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsNull">
            <summary>
            Возвращает признак того, что объект является нулевым.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsNew">
            <summary>
            Возвращает признак того, что объект был создан в рамках сеанса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsDeleted">
            <summary>
            Возвращает признак того, что объект был удален в рамках сеанса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsPropertiesModified">
            <summary>
            Возвращает признак того, что значения свойств объекта 
            были изменены в рамках сеанса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsAttachmentsModified">
            <summary>
            Возвращает признак того, что в рамках сеанса были внесены изменения
            в прикрепленные файлы.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsChildsModified">
            <summary>
            Возвращает признак того, что набор дочерних объектов был 
            изменен в рамках сеанса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.Id">
            <summary>
            Возвращает идентификатор объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.Storage">
            <summary>
            Возвращает хранилище объектов, к которому относится данный объект.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.Class">
            <summary>
            Возвращает метаданные класса данного объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.Attachments">
            <summary>
            Возвращает список прикрепленных файлов.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.SystemView">
            <summary>
            Возвращает служебное представление объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsError">
            <summary>
            Возвращает признак того, что объект не существует в БД.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.IsUntypedNull">
            <summary>
            Возвращает признак того, что реестровый объект является нетипизированным нулевым объектом.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataObject.Session">
            <summary>
            Возвращает сеанс, которому принадлежит реестровый объект.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObject.Surrogate">
            <summary>
            Базовый класс для суррогатов сериализации реестровых объектов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Surrogate.IsSupportedType(System.Type)">
            <summary>
            Возвращает признак того, что указаный тип поддерживается суррогатом.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Surrogate.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
            <summary>
            Реализация интерфейса.
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Surrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Реализация интерфейса.
            </summary>
            <param name="obj"></param>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.Surrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Реализация интерфейса.
            </summary>
            <param name="obj"></param>
            <param name="info"></param>
            <param name="context"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObject.SerializationSurrogate">
            <summary>
            Суррогат для сериализации ссылок на реестров объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SerializationSurrogate.IsSupportedType(System.Type)">
            <summary>
            Проверяет, является ли указанный тип подклассом DataObject.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.SerializationSurrogate.GetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Сериализация ссылки на реестровый объект.
            </summary>
            <param name="obj"></param>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObject.DeserializationSurrogate">
            <summary>
            Суррогат для десериализации ссылок на реестров объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.DeserializationSurrogate.#ctor(Integro.InMeta.Runtime.DataSession)">
            <summary>
            Инициализация суррограта.
            </summary>
            <param name="session">Сеанс, в рамках которого будет восстановлена ссылка на реестровый объект.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.DeserializationSurrogate.IsSupportedType(System.Type)">
            <summary>
            Проверяет, является ли указанный тип ссылкой на реестровый объект.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObject.DeserializationSurrogate.SetObjectData(System.Object,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector)">
            <summary>
            Десериализация ссылки на реестровый объект.
            </summary>
            <param name="obj"></param>
            <param name="info"></param>
            <param name="context"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObjectExternalLink">
            <summary>
            Содержит список внешних ссылок по заданному варианту связи.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectExternalLink.Ref">
            <summary>
            Возвращает вариант связи, на основе которого собран список.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectExternalLink.Objects">
            <summary>
            Возвращает список ссылающихся объектов.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataObjectExternalLinks">
            <summary>
            Содержит список ссылок на реестровый объект.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectExternalLinks.Object">
            <summary>
            Возвращает объект, на который ссылаются другие объекты.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataObjectExternalLinks.Links">
            <summary>
            Возвращает список ссылающихся объектов, сгруппированный по вариантам связи.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataObjectExternalLinks.GetObjects">
            <summary>
            Возвращает сводный список всех ссылающихся объектов.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.PropertyStateFilter">
            <summary>
            Задает фильтр свойств по признаку - значение загружено/изменено.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.PropertyStateFilter.Assigned">
            <summary>
            Свойства с присвоенными значениями.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.PropertyStateFilter.Modified">
            <summary>
            Свойства с измененными значениями.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataProperty">
            <summary>
            Предоставляет доступ к значению свойства реестрового объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataProperty.Metadata">
            <summary>
            Содержит ссылку на метаданные свойства.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataProperty.Object">
            <summary>
            Содержит ссылку на реестровый объект, которому принадлежит свойство.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataProperty.NotAssigned">
            <summary>
            Содержит ссылку на объект, сигнализирующий о том,
            что значение свойства не было присвоено.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataProperty.FValue">
            <summary>
            Хранит текущее значение свойства.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataProperty.FModified">
            <summary>
            Хранит признак того, что значение свойства было 
            изменено в рамках транзакции сеанса.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует объект доступа к значению свойства.
            </summary>
            <param name="obj"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.EscapeFromDBNull(System.Object)">
            <summary>
            Заменяет значение <c>DBNull.Value</c> на <c>null</c>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.CheckReading">
            <summary>
            Выполняет проверку на наличие значения свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.Load(Integro.InMeta.Runtime.DataProperty)">
            <summary>
            Копирует значение указанного свойства.
            </summary>
            <param name="property">Свойство, значение которого необходимо скопировать в данное свойство.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.Assign(Integro.InMeta.Runtime.DataProperty)">
            <summary>
            Копирует значение указанного свойства.
            </summary>
            <param name="property">Свойство, значение которого необходимо скопировать в данное свойство.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.CheckWriting">
            <summary>
            Выполняет проверку на допустимость присваивания 
            свойству нового значения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.LoadValueFromDb(System.Object,System.Object,Integro.InMeta.Runtime.LoadContext)">
            <summary>
            Устанавливает значение свойства на основе данных,
            загруженых из БД.
            </summary>
            <param name="value"></param>
            <param name="exValue"></param>
            <param name="loadContext"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.LoadValue(System.Object)">
            <summary>
            Загружает указанное значение в свойство. Флаг модификации не устанавливается.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.SaveValueToDb(System.Object@,System.Object@)">
            <summary>
            Возвращает значение свойства, которое следует 
            записать в БД.
            </summary>
            <param name="value"></param>
            <param name="exValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.GetValue">
            <summary>
            Возвращает значение свойства на основе текущего <c>FValue</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.SetValue(System.Object)">
            <summary>
            Устанавливает значение FValue в переданное извне value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.Clear">
            <summary>
            Сбрасывает значение свойства в пустое.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.ToString">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
            <returns>Строковое представление значения свойства или пустая строка,
            если значение свойства пустое.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.ToString(System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
            <returns>Строковое представление значения свойства или пустая строка,
            если значение свойства пустое.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.ToString(System.String)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
            <returns>Строковое представление значения свойства или пустая строка,
            если значение свойства пустое.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.Commit">
            <summary>
            Фиксирует изменения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.Rollback">
            <summary>
            Отменяет изменения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataProperty.DropCache">
            <summary>
            Сбрасывает текущее значение, если оно не было модифицировано.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.Session">
            <summary>
            Возвращает сеант, которому принадлежит реестровый объект.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.SystemView">
            <summary>
            Возвращает служебную информацию о свойстве.
            </summary>
            <remarks>Служебная информация представлена в виде:<br></br>
            <code>
            Объект: название-класса
            Свойство: название-свойства (заголовок-свойства)
            </code>
            </remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.UntypedValue">
            <summary>
            Возвращает/устанавливает значение свойства в нетипизированном виде.
            </summary>
            <remarks><para>Пустому значению соответствует <c>null</c>.</para>
            <para>При присваивании значения <c>DBNull.Value</c>, оно будет 
            преобразовано в <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.IsModified">
            <summary>
            Возврашает признак того, что значение свойства было 
            изменено в ходе выполнения сеанса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.NotNullUntypedValue">
            <summary>
            Возвращает непустое значение свойства в нетипизированном виде.
            </summary>
            <remarks>Если значение пустое, будет сгенерировано исключение.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.IsNull">
            <summary>
            Возвращает признак того, что текущее значения свойства пустое.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataProperty.IsAssigned">
            <summary>
            Возвращает признак того, что значение свойства присвоено.
            </summary>
            <remarks>Присваивание значения происходит в двух случаях:
            <list>
            <item>При загрузке данных посредством <c>Session.LoadData</c>.</item>
            <item>При установке значения через открытое API.</item>
            </list>
            </remarks>
        </member>
        <member name="T:Integro.InMeta.Runtime.StringProperty">
            <summary>
            Представляет строковое свойство.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.StringProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
            <param name="obj"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.StringProperty.ValueDef(System.String)">
            <summary>
            Возвращает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то возвращает 
            значение параметра <c>def</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.StringProperty.ValueDef">
            <summary>
            Возвращает значение свойства или пустую строку если текущее значение пустое (IsNull).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.StringProperty.ToString(System.IFormatProvider)">
            <summary>
            Возвращает строковое представление.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.StringProperty.Value">
            <summary>
            Возвращает или устанавливает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то чтение данного 
            свойства вызовет ошибку.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.StringProperty.ZeroValue">
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
        </member>
        <member name="T:Integro.InMeta.Runtime.IntegerProperty">
            <summary>
            Представляет целочисленное свойство реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.IntegerProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
            <param name="obj"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.IntegerProperty.ValueDef(System.Int32)">
            <summary>
            Возвращает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то возвращает 
            значение параметра <c>def</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.IntegerProperty.ValueDef">
            <summary>
            Возвращает значение свойства или 0, если текущее значение пустое (IsNull).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.IntegerProperty.ToString(System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.IntegerProperty.ToString(System.String)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.IntegerProperty.ToString(System.String,System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.IntegerProperty.Value">
            <summary>
            Возвращает или устанавливает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то чтение данного 
            свойства вызовет ошибку.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.IntegerProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DoubleProperty">
            <summary>
            Представляет числовое свойство реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DoubleProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
            <param name="obj"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DoubleProperty.ValueDef(System.Double)">
            <summary>
            Возвращает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то возвращает 
            значение параметра <c>def</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DoubleProperty.ValueDef">
            <summary>
            Возвращает значение свойства или 0, если текущее значение пустое (IsNull).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DoubleProperty.ToString(System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DoubleProperty.ToString(System.String)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DoubleProperty.ToString(System.String,System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DoubleProperty.Value">
            <summary>
            Возвращает или устанавливает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то чтение данного 
            свойства вызовет ошибку.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DoubleProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DateTimeProperty">
            <summary>
            Представляет свойство реестрового объекта с подтипом дата/время.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DateTimeProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
            <param name="obj"></param>
            <param name="metadata"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DateTimeProperty.ValueDef(System.DateTime)">
            <summary>
            Возвращает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то возвращает 
            значение параметра <c>def</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DateTimeProperty.ToString(System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DateTimeProperty.ToString(System.String)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DateTimeProperty.ToString(System.String,System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DateTimeProperty.Value">
            <summary>
            Возвращает или устанавливает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то чтение данного 
            свойства вызовет ошибку.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DateTimeProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.BooleanProperty">
            <summary>
            Представляет логическое свойство реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.BooleanProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.BooleanProperty.ValueDef(System.Boolean)">
            <summary>
            Возвращает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то возвращает 
            значение параметра <c>def</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.BooleanProperty.ValueDef">
            <summary>
            Возвращает значение свойства или 0, если текущее значение пустое (IsNull).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.BooleanProperty.ToString(System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.BooleanProperty.Value">
            <summary>
            Возвращает или устанавливает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то чтение данного свойства 
            вызовет ошибку.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.BooleanProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.CurrencyProperty">
            <summary>
            Представляет денежное свойство реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CurrencyProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CurrencyProperty.ValueDef(System.Decimal)">
            <summary>
            Возвращает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то возвращает 
            значение параметра <c>def</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.CurrencyProperty.ValueDef">
            <summary>
            Возвращает значение свойства или 0, если текущее значение пустое (IsNull).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.CurrencyProperty.ToString(System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CurrencyProperty.ToString(System.String)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.CurrencyProperty.ToString(System.String,System.IFormatProvider)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.CurrencyProperty.Value">
            <summary>
            Возвращает или иниуиализирует значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то чтение данного 
            свойства вызовет ошибку.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.CurrencyProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.BinaryProperty">
            <summary>
            Представляет двоичное свойство реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.BinaryProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.BinaryProperty.Value">
            <summary>
            Возвращает или устанавливает значение свойства.
            </summary>
            <remarks>Если текущее значение пустое, то чтение данного 
            свойства вызовет ошибку.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.BinaryProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.LinkProperty">
            <summary>
            Представляет свойство реестрового объекта - ссылка.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.LinkProperty.#ctor(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализирует свойство.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.LinkProperty.SaveValueToDb(System.Object@,System.Object@)">
            <summary>
            Возвращает значения свойства, необходимые для сохранения в БД.
            </summary>
            <param name="value"></param>
            <param name="exValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.LinkProperty.LoadValueFromDb(System.Object,System.Object,Integro.InMeta.Runtime.LoadContext)">
            <summary>
            Присваивает текущее значение на основе значений,
            загруженных из БД.
            </summary>
            <param name="value"></param>
            <param name="exValue"></param>
            <param name="loadContext"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.LinkProperty.SetValue(System.Object)">
            <summary>
            Присваивает текущее значение на основе значений, 
            полученных через открытое API.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.LinkProperty.GetValue">
            <summary>
            Возвращает значение для открытого API на основе текущего значения.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.LinkProperty.ToString">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.LinkProperty.ToString(System.String)">
            <summary>
            Возвращает строковое представление свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.LinkProperty.Value">
            <summary>
            Возвращает или устанавливает значение свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.LinkProperty.ZeroValue">
            <summary>
            Возвращает нулевое значение свойства, используемое вместо пустого (в режиме работы сеанса TreatNullsAsZero).
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ObjectViewScriptRuntime">
            <summary>
            Представляет среду выполнения скрипта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectViewScriptRuntime.#ctor(Integro.InMeta.Runtime.DataSession)">
            <summary>
             Инициализирует объектную модель скриптов представлений объектов.
            </summary>
            <param name="session"></param>
        </member>
        <member name="P:Integro.InMeta.Runtime.ObjectViewScriptRuntime.CurrentUser">
            <summary>
             Возвращает пользователя, в контексте которого выполняется скрипт представления объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ObjectViewScriptRuntime.MetaManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ObjectViewScriptRuntime.Meta">
            <summary>
            
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ObjectViewScriptRuntime.XmlUtils">
            <summary>
            
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ObjectViewScriptRuntime.XStrUtils">
            <summary>
            
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataStorage">
            <summary>
            Хранилище объектов одного класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataStorage.Session">
            <summary>
            Сеанс работы, к которому относится данное хранилище.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataStorage.Class">
            <summary>
            Класс реестровых объектов, к которому относится данное хранилище.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataStorage.FObjects">
            <summary>
            Таблица объектов, размещенных в памяти сеанса.
            В качестве ключа используется идентификатор объекта.
            В таблице содержаться и удаленные в рамках сеанса объекта.
            </summary>
            <remarks><para>Таблица не содержит новых объектов, 
            для которых не проставлены идентификаторы. Эти объекты
            размещены в <c>Session.NewObjectsWithoutGeneratedId</c>.</para>
            </remarks>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataStorage.FObjectsToUpdate">
            <summary>
            Таблица объектов для обновления. Содержит измененные объекты, 
            удаленные и новые, для которых были сгенерированы идентификаторы.
            </summary>
            <remarks>Таблица не содержит новых объектов, 
            для которых не проставлены идентификаторы. Эти объекты
            размещены в <c>Session.NewObjectsWithoutGeneratedId</c>.</remarks>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataStorage.NullObject">
            <summary>
            Нулевой объект класса, к которому относится хранилище.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataStorage.FObjectViewEvaluators">
            <summary>
            Содержит список вычислителей представлений.
            По количеству элементов и порядку их следования соответствует списку MetadataClass.ObjectViews
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.#ctor(Integro.InMeta.Runtime.DataSession,Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Инициализирует хранилище.
            </summary>
            <param name="session"></param>
            <param name="cls"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.CreateObjectInstance">
            <summary>
            Создает экземпляр реестрового объекта.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.CreateListInstance">
            <summary>
            Создает экземпляр списка реестровых объектов.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.CreateChildListInstance(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataChildRef)">
            <summary>
            Создает экземпляр списка дочерних реестровых объектов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.CreateLinkPropertyInstance(Integro.InMeta.Runtime.DataObject,Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Создает экземпляр объекта доступа к свойсву, являющемуся
            ссылкой на данный класс.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.NewCacheItem(Integro.InMeta.Runtime.DataId,Integro.InMeta.Runtime.ObjectSessionState)">
            <summary>
            Создает экземпляр реестрового объекта и помещает его в память сеанса.
            </summary>
            <param name="id">Идентификатор объекта.</param>
            <param name="sessionState">Начальное сеансовое состояние.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.AddNew">
            <summary>
            Создает новый объект класса.
            </summary>
            <returns>Экземпляр нового объекта.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.AddExisting(Integro.InMeta.Runtime.DataId)">
            <summary>
            Добавляет новый объект с заданным идентификатором.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.GetObject(Integro.InMeta.Runtime.DataId)">
            <summary>
            Возвращает экземпляр существующего объекта по его идентификатору.
            </summary>
            <remarks>Если указанного объекта нет в базе данных, то будет возвращен объект в состоянии IsError.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.EnsureCacheItem(Integro.InMeta.Runtime.DataId)">
            <summary>
            Возвращает экземпляр существующего объекта по его идентификатору.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.CreatePlanFromString(System.String)">
            <summary>
            Создает план загрузки, сформированный на основе
            строки в формате XML.
            </summary>
            <param name="loadPlan"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Query(Integro.InMeta.Runtime.LoadPlan,Integro.InMeta.Runtime.DataId[])">
            <summary>
            Производит загрузку объектов в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <param name="ids">Список идентификаторов объектов.</param>
            <returns>Список загруженных объектов.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Query(System.String,Integro.InMeta.Runtime.DataId[])">
            <summary>
            Производит загрузку объектов в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <param name="ids">Список идентификаторов объектов.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Query(Integro.InMeta.Runtime.LoadPlan,System.String,System.Object[])">
            <summary>
            Производит загрузку объектов в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <param name="condition">Условие отбора объетов.</param>
            <param name="paramArray">Список параметров запроса.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Query(Integro.InMeta.Runtime.LoadPlan)">
            <summary>
            Производит загрузку всех объектов в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Query(System.String,System.String,System.Object[])">
            <summary>
            Производит загрузку объектов в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <param name="condition">Условие отбора объетов.</param>
            <param name="paramArray">Список параметров запроса.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Query(System.String)">
            <summary>
            Производит загрузку всех объектов в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Query(System.String,Integro.InMeta.Runtime.QueryCondition)">
            <summary>
            Производит загрузку объектов в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <param name="conditionBuilder">Построитель условия отбора объетов.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.QueryObject(Integro.InMeta.Runtime.LoadPlan,Integro.InMeta.Runtime.DataId)">
            <summary>
            Производит загрузку объекта в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <param name="id">Идентификатор объекта.</param>
            <returns>Загруженный объект или нулевой объект, 
            если объекта с заданным идентификатором нет в БД.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.QueryObject(System.String,Integro.InMeta.Runtime.DataId)">
            <summary>
            Производит загрузку объекта в память сеанса из БД.
            </summary>
            <param name="loadPlan">План загрузки.</param>
            <param name="id">Идентификатор объекта.</param>
            <returns>Загруженный объект или нулевой объект, 
            если объекта с заданным идентификатором нет в БД.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.QueryTotals(System.String,System.String,System.Object[],System.String)">
            <summary>
            Выполняет запрос итоговых данных.
            </summary>
            <param name="columns"></param>
            <param name="condition"></param>
            <param name="args"></param>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataStorage.Dispose">
            <summary>
            Выполняет завершение работы с объектом.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataStorage.Item(Integro.InMeta.Runtime.DataId)">
            <summary>
            Возвращает экземпляр существующего объекта по его идентификатору.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataStorage.Item(System.String)">
            <summary>
            Возвращает экземпляр существующего объекта по его идентификатору.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.Loader">
            <summary>
            Класс - загрузчик данных.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.Loader.#ctor(Integro.InMeta.Runtime.LoadPlan)">
            <summary>
            Инициализирует загрузчик.
            </summary>
            <param name="plan">План загрузки.</param>
        </member>
        <member name="T:Integro.InMeta.Runtime.LoadPlan">
            <summary>
            План загрузки данных объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.LoadPlan.Class">
            <summary>
            Класс, для которого составлен данный план загрузки.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.LoadPlan.Data">
            <summary>
            Перечень свойств простых типов, которые следует загрузить.
            </summary>
            <remarks>
            Данный список не должен содержать свойства, являющиеся ассоциациями.
            Такие свойства должны помещаться в список <see cref="F:Integro.InMeta.Runtime.LoadPlan.Links"/>
            </remarks>
        </member>
        <member name="F:Integro.InMeta.Runtime.LoadPlan.Links">
            <summary>
            Планы загрузки связанных объектов (ассоциаций).
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.LoadPlan.Childs">
            <summary>
            Планы загрузки агрегатов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.LoadPlan.Views">
            <summary>
            Планы загрузки представлений объектов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.LoadPlan.#ctor(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Инициализирует план загрузки для указанного класса.
            </summary>
            <param name="cls"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.LoadPlan.EnsureDataProperty(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Добавить свойство в план загрузки.
            </summary>
            <remarks>
            <para>Если свойство уже включено в план загрузки, оно будет проигнорировано.</para>
            <para>Если свойство является ассоциацией, то будет сгенерировано исключение.</para>
            </remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.LoadPlan.EnsureAssociationRef(Integro.InMeta.Runtime.MetadataAssociationRef,Integro.InMeta.Runtime.LoadPlan)">
            <summary>
            Добавить план загрузки связанного объекта.
            </summary>
            <param name="assRef">Вариант связи свойства-ассоциации, для которой задается 
            план загрузки.</param>
            <param name="plan">План загрузки связанного объекта.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.LoadPlan.EnsureChildRef(Integro.InMeta.Runtime.MetadataChildRef,Integro.InMeta.Runtime.LoadPlan)">
            <summary>
            Добавить план загрузки дочерних объектов.
            </summary>
            <param name="childRef">Ссылка на класс дочерних объектов.</param>
            <param name="plan">План загрузки дочерних объектов.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.LoadPlan.EnsureProperty(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Добавить план загрузки свойства.
            </summary>
            <param name="propertyMetadata"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.LoadPlan.EnsureObjectView(System.String,Integro.InMeta.Runtime.DataSession)">
            <summary>
            Добавить план загрузки представления объекта.
            </summary>
            <param name="viewName">Название представления объекта.</param>
            <param name="session">Сеанс работы с данными.</param>
            <remarks>Данный метод формирует план загрузки для указанного представления и 
            выполняет слияние текущего плана загрузки с планом загрузки для представления.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.LoadPlan.SaveToXml(System.Xml.XmlNode)">
            <summary>
            Сохраняет план загрузки в формате XML.
            </summary>
            <param name="planNode">Корневой узел для плана загрузки.</param>
        </member>
        <member name="T:Integro.InMeta.Runtime.AssociationRefLoadPlan">
            <summary>
            Представляет план загрузки варианта связи ассоциации.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.AssociationRefLoadPlan.Ref">
            <summary>
            Вариант связи, для которой предназначен данный план загрузки.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.AssociationRefLoadPlan.Plan">
            <summary>
            План загрузки связанного объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.AssociationRefLoadPlan.#ctor(Integro.InMeta.Runtime.MetadataAssociationRef,Integro.InMeta.Runtime.LoadPlan)">
            <summary>
            Инициализирует план загрузки варианта связи.
            </summary>
            <param name="assRef"></param>
            <param name="plan"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.AssociationRefLoadPlanList">
            <summary>
            Представляет список планов загрузки вариантов связи.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.AssociationRefLoadPlanList.Item(System.Int32)">
            <summary>
            Возвращает план по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ChildRefLoadPlan">
            <summary>
            Представляет план загрузки дочерних объектов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ChildRefLoadPlan.ChildRef">
            <summary>
            Ссылка на класс дочерних объектов, для которой предназначен данный план загрузки.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ChildRefLoadPlan.Plan">
            <summary>
            План загрузки дочернего объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ChildRefLoadPlan.#ctor(Integro.InMeta.Runtime.MetadataChildRef,Integro.InMeta.Runtime.LoadPlan)">
            <summary>
            Инициализирует план загрузки дочерних объектов.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ChildRefLoadPlanList">
            <summary>
            Представляет список планов загрузки дочерних объектов.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ChildRefLoadPlanList.Item(System.Int32)">
            <summary>
            Возвращает план загрузки по индексу.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectLoader.FindLinkPropertyLoader(Integro.InMeta.Runtime.MetadataAssociation)">
            <summary>
            Найти загрузчик свойства-ассозиации.
            </summary>
            <param name="association">Метаданные ассоциации, 
            для которой производится поиск загрузчика.</param>
            <returns>Объект-загрузчик или <c>null</c>, если загрузчик не найден.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectLoader.EnsureLinkPropertyLoader(Integro.InMeta.Runtime.Loader,Integro.InMeta.Runtime.AssociationRefLoadPlan)">
            <summary>
            Зарегистрировать загрузчик свойства-ассоциации для варианта связи,
            определенного <c>linkPlan.Ref</c>.
            </summary>
            <param name="loader">Менеджер загрузки.</param>
            <param name="refPlan">План загрузки варианта связи.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.ObjectLoader.Prepare(Integro.InMeta.Runtime.Loader)">
            <summary>
            Сформировать список загрузчиков частей объекта на основе
            плана загрузки.
            </summary>
            <param name="loader">Менеджер загрузки.</param>
        </member>
        <member name="T:Integro.InMeta.Runtime.CompareOp">
            <summary>
            Операция сравнения значений.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CompareOp.Equal">
            <summary>
            Проверка на равенство.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CompareOp.NotEqual">
            <summary>
            Проверка на неравенство.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CompareOp.LessThan">
            <summary>
            Проверка на "&lt;".
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CompareOp.GreaterThan">
            <summary>
            Проверка на "&gt;".
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CompareOp.LessOrEqual">
            <summary>
            Проверка на "&lt;=".
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.CompareOp.GreaterOrEqual">
            <summary>
            Проверка на "&gt;=".
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.QueryCondition">
            <summary>
            Позволяет строить условия отбора объектов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.IsNull(System.String)">
            <summary>
            Добавляет условие на пустое значение поля.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.IsNotNull(System.String)">
            <summary>
            Добавляет условие на непустое значение поля.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.Compare(System.String,Integro.InMeta.Runtime.CompareOp,System.Object)">
            <summary>
            Добавляет условие сравнения поля с заданым значением.
            </summary>
            <param name="name"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.Like(System.String,System.Object)">
            <summary>
            Добавляет условие на совпадение поля с заданым значением.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.In(System.String,System.Object[])">
            <summary>
            Добавляет условие принадлежности поля заданому множеству.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.Between(System.String,System.Object,System.Object)">
            <summary>
            Добавляет условие попадания поля в указанный диапазон.
            </summary>
            <param name="name"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.PropIsNull(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Добавляет условие на пустое значение свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.PropIsNotNull(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Добавляет условие на не пустое значение свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.PropCompare(Integro.InMeta.Runtime.MetadataProperty,Integro.InMeta.Runtime.CompareOp,System.Object)">
            <summary>
            Добавляет условие на сравнение свойства с указанным значением.
            </summary>
            <param name="prop"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.PropIs(Integro.InMeta.Runtime.MetadataProperty,System.Object)">
            <summary>
            Добавляет условие на совпадение свойства указанному значению.
            </summary>
            <param name="prop"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.PropLike(Integro.InMeta.Runtime.MetadataProperty,System.Object)">
            <summary>
            Добавляет условие на подобие свойства указанному значению.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.PropIn(Integro.InMeta.Runtime.MetadataProperty,System.Object[])">
            <summary>
            Добавляет условие на принадлежность свойства указанному списку значению.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.QueryCondition.PropBetween(Integro.InMeta.Runtime.MetadataProperty,System.Object,System.Object)">
            <summary>
            Добавляет условие на принадлежность свойства указанному диапазону значений.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.QueryCondition.IsEmpty">
            <summary>
            Возвращает признак того, что условие пустое.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.QueryCondition.Begin">
            <summary>
            Открывает условную группу.
            </summary>
            <remarks>Для закрытия группы используется <c>End</c>.
            Группировка условий эквивалентна заключению условия в скобки.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.QueryCondition.End">
            <summary>
            Завершает условную группу, открытую при помощи <c>Begin</c>.
            </summary>
            <remarks>Группирование условий эквивалентно заключению условия в скобки.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.QueryCondition.And">
            <summary>
            Комбинирует предыдущее условие со следующим логическим оператором <c>И</c>.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.QueryCondition.Or">
            <summary>
            Комбинирует предыдущее условие со следующим логическим оператором <c>ИЛИ</c>.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.QueryCondition.Not">
            <summary>
            Добавляет отрицание следующего условия.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.Totals">
            <summary>
            Содержит результаты запроса итоговых данных.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.Totals.Count">
            <summary>
            Возвращает количество строк.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.Totals.Item(System.Int32)">
            <summary>
            Возвращает строку.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.Totals.Row">
            <summary>
            Содержит одну строку результатов запроса итоговых данных.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.IsNull(System.Int32)">
            <summary>
            Возвращает признак того, что значение пустое.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsString(System.Int32,System.String)">
            <summary>
            Возвращает значение в виде строки.
            </summary>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsString(System.Int32)">
            <summary>
            Возвращает значение в виде строки.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsInteger(System.Int32,System.Int32)">
            <summary>
            Возвращает значение в виде числа.
            </summary>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsInteger(System.Int32)">
            <summary>
            Возвращает значение в виде числа.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsDouble(System.Int32,System.Double)">
            <summary>
            Возвращает значение в виде числа.
            </summary>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsDouble(System.Int32)">
            <summary>
            Возвращает значение в виде числа.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsDateTime(System.Int32,System.DateTime)">
            <summary>
            Возвращает значение в формте даты/времени.
            </summary>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsDateTime(System.Int32)">
            <summary>
            Возвращает значение в формте даты/времени.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsDecimal(System.Int32,System.Decimal)">
            <summary>
            Возвращает значение в формате денежной единицы.
            </summary>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsDecimal(System.Int32)">
            <summary>
            Возвращает значение в формате денежной единицы.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsBoolean(System.Int32,System.Boolean)">
            <summary>
            Возвращает значение в логическом формате.
            </summary>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Totals.Row.AsBoolean(System.Int32)">
            <summary>
            Возвращает значение в логическом формате.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.Totals.Row.Count">
            <summary>
            Возвращает количество значений.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.Totals.Row.Item(System.Int32)">
            <summary>
            Возвращает значение.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.QueryTotals">
            <summary>
            Summary description for QueryTotals.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataException">
            <summary>
            Представляет ошибки, возникающие при работе с метаданными.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataException.#ctor">
            <summary>
            Инициализирует объект.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Служебный конструктор.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataException.#ctor(System.String)">
            <summary>
            Инициализирует объект заданным текстом сообщения об ошибке.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataException.#ctor(System.String,System.Exception)">
            <summary>
            Инициализирует объект заданным текстом сообщения и ссылкой 
            на объект ошибки, явившемся причиной исключения.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataClassPurpose">
            <summary>
            Назначение класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClassPurpose.Registry">
            <summary>
            Множество объектов данного класса отражает 
            некоторую сущность прикладной области.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClassPurpose.Dictionary">
            <summary>
            Множество объектов данного класса является справочником.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataPropertyPurpose">
            <summary>
            Назначение свойства.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataPropertyPurpose.Id">
            <summary>
            Свойство является идентификатором объекта.
            Данное свойство является служебным и не может быть считано напрямую.
            Вместо этого следует использовать свойство <c>DataObject.Id</c>
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataPropertyPurpose.Data">
            <summary>
            Свойство содержит данные простого типа.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataPropertyPurpose.Association">
            <summary>
            Свойство является ссылкой на другой реестровый объект.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataPropertyPurpose.Aggregation">
            <summary>
            Свойство является ссылкой на родительский объект.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ApplicationMetadata">
            <summary>
            Метаданные приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationMetadata.SourceNode">
            <summary>
            Содержит корневой узел метаданных, из которого 
            были загружены метаданные приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationMetadata.Classes">
            <summary>
            Содержит список классов реестровых объектов приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationMetadata.ScriptLibraries">
            <summary>
            Содержит список библиотек скриптов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ApplicationMetadata.#ctor(System.Xml.XmlNode)">
            <summary>
            Инициализирует метаданные из Xml.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataAssociation">
            <summary>
            Метаданные ассоциации (ссылка на реестровый объект).
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataAssociation.Property">
            <summary>
            Метаданные свойства, определяющего данную ассоциацию.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataAssociation.Refs">
            <summary>
            Список ссылок на классы, определенный данной ассоциацией.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociation.Class">
            <summary>
            Класс, в рамках которого определена данная ассоциация.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociation.Selector">
            <summary>
            Свойство, отвещающее за селектор связи.
            Используется только для ассоциаций с несколькими вариантами связи.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataAssociationList">
            <summary>
            Список ассоциаций.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataAssociationList.GetEnumerator">
            <summary>
            Реализация IEnumerable.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataAssociationList.Find(System.String)">
            <summary>
            Выполняет поиск ассоциации по названию свойства.
            </summary>
            <param name="name">Название свойства, являющегося ассоциацией.</param>
            <returns>Найденная ассоциация или <c>null</c>.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataAssociationList.Need(System.String)">
            <summary>
            Возвращает ассоциацию с указанным названием свойства.
            </summary>
            <param name="name">Название свойства, являющегося ассоциацией.</param>
            <returns>Найденная ассоциация или ошибка.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationList.Count">
            <summary>
            Количество ассоциаций.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationList.Item(System.Int32)">
            <summary>
            Получение ассоциации по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.AggregationType">
            <summary>
            Тип агрегата.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.AggregationType.Attribute">
            <summary>
            Агрегат представляет собой составной атрибут композита.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.AggregationType.Part">
            <summary>
            Агрегат является самостоятельной сущностью и рассматривается как часть композита.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataAssociationRef">
            <summary>
            Ссылка на класс.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataAssociationRef.Association">
            <summary>
            Ассоциация, к которой относится данная ссылка.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRef.AggregationBuiltIn">
            <summary>
            Возвращает признак того, что при данной агрегации происходит встраивание 
            свойств агрегата в родительский объект.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRef.AggregationType">
            <summary>
            Возвращает тип агрегата.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRef.AggregationObjectView">
            <summary>
            Возвращает название представления объекта, используемого при отображении 
            агрегатов в дереве унифицированной формы редактирования родительского объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRef.AssociationObjectView">
            <summary>
            Возвращает название представления объекта, используемого при отображении 
            в поле редактирования ассоциации на унифицированной форме редактирования.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRef.RefClass">
            <summary>
            Класс, на который ссылается ассоциация.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRef.SelectorValue">
            <summary>
            Значение селектора связи, при котором ссылка производится на <c>RefClass</c>.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRef.AggregationRoleMemberName">
            <summary>
            Имя члена в родительском прикладном классе, 
            отвечающего за данную агрегацию.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataAssociationRefList">
            <summary>
            Список ссылок на классы.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataAssociationRefList.GetEnumerator">
            <summary>
            Реализация IEnumerbale.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataAssociationRefList.Find(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Найти ссылку на заданный класс.
            </summary>
            <param name="refClass">Искомый класс.</param>
            <returns>Сыылка на заданный класс, если ассоциация содержит такую ссылку, 
            или <c>null</c> в противном случае.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataAssociationRefList.Need(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Получить ссылку на заданный класс.
            </summary>
            <param name="refClass">Искомый класс.</param>
            <returns>Сыылка на заданный класс.</returns>
            <remarks>Если ассоциация не содержит ссылку на указанный класс,
            будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataAssociationRefList.FindBySelectorValue(System.Object)">
            <summary>
            Найти ссылку на класс по значению селектора связи.
            </summary>
            <param name="value">Значение селектора связи.</param>
            <returns>Сыылка на класс или <c>null</c>,
            если для заданного значения селектора не удалось найти ссылки.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRefList.Count">
            <summary>
            Количество ссылок на классы, определенные для ассоциации.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataAssociationRefList.Item(System.Int32)">
            <summary>
            Получить ссылку на класс по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataChildRef">
            <summary>
            Ссылка на дочерний класс.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataChildRef.AggregationRef">
            <summary>
            Свойство в дочернем классе, отвечающее за агрегацию.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataChildRef.ChildClass">
            <summary>
            Дочерний класс.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataChildRef.MemberName">
            <summary>
            Имя члена в прикладном классе, отвечающего за агрегацию.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataChildRefList">
            <summary>
            Список ссылок на дочерние классы.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataChildRefList.GetEnumerator">
            <summary>
            Реализация IEnumerable.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataChildRefList.Class">
            <summary>
            Содержит ссылку на класс, которому принадлежит данный список 
            ссылок на дочерние классы.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataChildRefList.Find(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Найти ссылку на дочерний класс.
            </summary>
            <param name="childClass">Искомый класс.</param>
            <returns>Сыылка на дочерний класс, если список содержит такую ссылку, 
            или <c>null</c> в противном случае.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataChildRefList.Need(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Получить ссылку на дочерний класс.
            </summary>
            <param name="childClass">Искомый класс.</param>
            <returns>Сыылка на дочерний класс.</returns>
            <remarks>Если список не содержит ссылку на указанный класс,
            будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataChildRefList.Need(System.String)">
            <summary>
            Получить ссылку на дочерний класс.
            </summary>
            <param name="className">Название искомого класса.</param>
            <returns>Сыылка на дочерний класс.</returns>
            <remarks>Если список не содержит ссылку на указанный класс,
            будет сгенерировано исключение.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataChildRefList.Count">
            <summary>
            Количество ссылок на дочерние классы.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataChildRefList.Item(System.Int32)">
            <summary>
            Получить ссылку на дочерний класс по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataClass">
            <summary>
            Класс реестровых объектов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.Properties">
            <summary>
            Содержит список свойств класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.AllProperties">
            <summary>
            Содержит полный список свойств класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.Associations">
            <summary>
            Содержит список ассоциаций класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.Owners">
            <summary>
            Содержит список родительских классов (классы, для которых 
            данный класс является агрегатом).
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.Childs">
            <summary>
            Содержит список классов, которые являются агрегатами данного класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.ExternalRefs">
            <summary>
            Список ссылок на данный класс.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.ObjectViews">
            <summary>
            Содержит список представлений объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.Index">
            <summary>
            Содержит порядковый номер класса в метаданных приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.Metadata">
            <summary>
            Содержит ссылку на метаданные приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.Name">
            <summary>
            Содержит название класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.TypeNamespace">
            <summary>
            Содержит название пространства имен типа для генератора кода.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.TypeName">
            <summary>
            Содержит название типа для генератора кода.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.QTypeName">
            <summary>
            Содержит полное название типа для генератора кода.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClass.IdentName">
            <summary>
            Содекржит модифицированное название класса, 
            пригодное для использования в качестве идентификатора.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClass.ToString">
            <summary>
            Возвращает информацию о классе в строковом виде.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClass.NeedMember(System.String,Integro.InMeta.Runtime.MetadataProperty@,Integro.InMeta.Runtime.MetadataChildRef@)">
            <summary>
            Проверяет, является ли указанное имя именем свойства или дочернего класса.
            </summary>
            <param name="memberName">Имя для проверки.</param>
            <param name="property">Возвращает метаданные свойства, если указанное имя определяет свойство.</param>
            <param name="childRef">Возвращает метаданные дочернего класса, если указанное имя определяет дочерний класс.</param>
            <remarks>Если указанное имя не является ни именем свойства ни именем дочернего класса, 
            будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClass.TryFindMember(System.String,Integro.InMeta.Runtime.MetadataProperty@,Integro.InMeta.Runtime.MetadataChildRef@)">
            <summary>
             Проверяет, является ли указанное имя именем свойства или дочернего класса.
            </summary>
            <param name="memberName">Имя для проверки.</param>
            <param name="property">Возвращает метаданные свойства, если указанное имя определяет свойство.</param>
            <param name="childRef">Возвращает метаданные дочернего класса, если указанное имя определяет дочерний класс.</param>
            <returns>Признак того, что указанное имя является именем свойства или именем дочернего класса.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.SessionMemberProgId">
            <summary>
            Возвращает название свойства прикладного класса <c>Session</c>,
            возвращающее объект <c>DataStorage</c> для данного класса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.Caption">
            <summary>
            Заголовок класса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.DataTable">
            <summary>
            Название таблицы СУБД, в которой храняться данные объектов этого класса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.Image">
            <summary>
            URL изображения для обозначения объекта данного класса.
            </summary>
            <remarks>URL задается относительно базового URL приложения.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.IsRoot">
            <summary>
            Признак того, что объекты данного класса являются корневыми.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.ListCaption">
            <summary>
            Заголовок списка объектов данного класса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.LargeImage">
            <summary>
            URL крупного изображения для обозначения объекта данного класса.
            </summary>
            <remarks>URL задается относительно базового URL приложения.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.ListImage">
            <summary>
            URL изображения для обозначения списка объектов данного класса.
            </summary>
            <remarks>URL задается относительно базового URL приложения.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.LargeListImage">
            <summary>
            URL крупного изображения для обозначения списка объектов данного класса.
            </summary>
            <remarks>URL задается относительно базового URL приложения.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.ViewAsTree">
            <summary>
            Признак того, что в поисковой форме список объектов должен 
            отображаться в виде дерева.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.SelectOnlyLeaves">
            <summary>
            Признак того, что при отображении списка объектов в виде дерева
            могут выбираться только конечные объекты (не содержащие вложенных элементов).
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.OrderBy">
            <summary>
            Названия свойств класса, по которым будет производится 
            сортировка в форме поиска.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.Purpose">
            <summary>
            Назначение класса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.DefaultEditForm">
            <summary>
            Название формы редактирования по умолчанию.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.IDProperty">
            <summary>
            Свойство, являющееся идентификатором объектов данного класса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClass.SourceNode">
            <summary>
            Узел XML исходных метаданных, на основе которого определен данный класс.
            </summary>
            <remarks>Вы можете использовать <c>SourceNode</c> для доступа к
            метаданным, не определенным схемой метаданных ИнМета.</remarks>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataClassList">
            <summary>
            Список классов реестровых объектов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClassList.GetEnumerator">
            <summary>
            Возвращает перечислитель.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClassList.Find(System.String)">
            <summary>
            Найти класс по заданному названию.
            </summary>
            <param name="name">Название класса.</param>
            <returns>Класс с заданным названием или <c>null</c>,
            если класс с заданным названием не присутствует в списке.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClassList.Need(System.String)">
            <summary>
            Получить класс по заданному названию.
            </summary>
            <param name="name">Название класса.</param>
            <returns>Класс с заданным названием.</returns>
            <remarks>Если класс с указанным названием не присутствует в списке,
            будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClassList.Contains(System.String)">
            <summary>
            Проверяет наличие класса с указанным названием в списке.
            </summary>
            <param name="name">Название искомого класса.</param>
            <returns>Класс с указанным названием или <c>null</c>, 
            если такого класса нет в списке.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClassList.CopyTo(System.Array,System.Int32)">
            <summary>
            Реализация ICollection.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataClassList.FindByIdentName(System.String)">
            <summary>
            Производит поиск класса по модифицированному названию.
            </summary>
            <param name="identName">Искомое название.</param>
            <returns>Найденный класс или <c>null</c>.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClassList.Count">
            <summary>
            Возвращает количество классов в списке.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClassList.SyncRoot">
            <summary>
            Реализация ICollection.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClassList.IsSynchronized">
            <summary>
            Реализация ICollection.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataClassList.Item(System.Int32)">
            <summary>
            Возвращает класс по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataClassMember">
            <summary>
            Описывает разновидности членов класса реестровых объектов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClassMember.Property">
            <summary>
            Свойство.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataClassMember.ObjectView">
            <summary>
            Представление объекта.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataVirtualProperty">
            <summary>
            Представляет виртуальное свойство представления объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualProperty.View">
            <summary>
            Представление объекта, к которому относится данное 
            виртуальное свойство.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualProperty.SourceNode">
            <summary>
            Исходный узел метаданных, на основе которого было создано 
            виртуальное свойство.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualProperty.Name">
            <summary>
            Название виртуального свойства.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualProperty.SourceMember">
            <summary>
            Член исходного класса, отвечающий за источник данных 
            виртуального свойства.
            Может быть экземпляром <c>MetadataAssociation</c> или 
            <c>MetadataChildRef</c>.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualProperty.SourceNavigation">
            <summary>
            Маршрут от исходного объекта к целевому.
            <remarks>Задается в формате составного идентификатора ИнМеты.</remarks>
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualProperty.RefMemberType">
            <summary>
            Разновидность члена связанного класса.
            Совместно с <c>RefMemberName</c> определяет 
            член связанного класса, являющийся поставщиком данных
            для виртуального свойства.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualProperty.RefMemberName">
            <summary>
            Назваение члена связанного класса, значение или текст которого 
            является поставщиком данных для виртуального свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataVirtualProperty.ToString">
            <summary>
            Преобразует метаданные виртуального свойства в строковое представление 
            в формате "Виртуальное свойство: Класс1.Представление1.Свойство1".
            </summary>
            <returns></returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataVirtualPropertyList">
            <summary>
            Содержит список виртуальных свойств.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataVirtualPropertyList.ObjectView">
            <summary>
            Представление объекта, которому принадлежит данный список.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataVirtualPropertyList.Find(System.String)">
            <summary>
            Выполняет поиск виртуального свойства по названию.
            </summary>
            <param name="name">Название виртуального свойства.</param>
            <returns>Найденное виртуальное свойство или <c>null</c>.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataVirtualPropertyList.Item(System.Int32)">
            <summary>
            Возвращает виртуальное свойство по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ContentType">
            <summary>
            Описывает формат представления текста.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ContentType.Text">
            <summary>
            Текст не содержит разметки.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ContentType.Html">
            <summary>
            Текст представлен в формате HTML.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataObjectView">
            <summary>
            Определяет представление объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.SourceNode">
            <summary>
            Возвращает ссылку на узел метаданных, из которого было
            загружено представление объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.Class">
            <summary>
            Содержит ссылку на метаданные класса, 
            к которому относится представление объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.Name">
            <summary>
            Содержит название представления объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.Caption">
            <summary>
            Содержит заголовок представления.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.ContentType">
            <summary>
            Возвращает формат текста представления.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.Script">
            <summary>
            Содержит текст скрипта представления.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.ScriptLanguage">
            <summary>
            Содержит название языка программирования, 
            использующегося в тексте скрипта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.VirtualProperties">
            <summary>
            Содержит список виртуальных свойств представления объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.Index">
            <summary>
            Возвращает порядковый номер представления объекта в рамках класса.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataObjectView.Using">
            <summary>
            Возвращает список имен библиотек скриптов, используемых в скрипте представления.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataObjectView.ToString">
            <summary>
            Возвращает информацию о представлении объекта в строковом виде.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataObjectView.IsDefault">
            <summary>
            Возвращает признак того, что представление объекта является 
            представлением по умолчанию.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataObjectViewList">
            <summary>
            Список свойств реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataObjectViewList.GetEnumerator">
            <summary>
            Возвращает пречислитель списка.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataObjectViewList.Find(System.String)">
            <summary>
            Найти представление объекта по названию.
            </summary>
            <param name="name">Название представления.</param>
            <returns>Найденное представление или <c>null</c>, если представление с указанным названием не найдено.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataObjectViewList.Need(System.String)">
            <summary>
            Получить представление объекта по названию.
            </summary>
            <param name="name">Название представления.</param>
            <returns>Представление с указанным названием.</returns>
            <remarks>Если представление с указанным названием 
            не найдено, то будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataObjectViewList.Contains(Integro.InMeta.Runtime.MetadataObjectView)">
            <summary>
            Проверить, есть ли указанное представление объекта в списке.
            </summary>
            <param name="objectView">Представление объекта.</param>
            <returns><c>true</c>, если свойство содержится в списке, или <c>false</c> в противном случае.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataObjectViewList.Contains(System.String)">
            <summary>
            Проверить, есть ли представление с указанным названием в списке.
            </summary>
            <param name="name">Название представления.</param>
            <returns><c>true</c>, если представление содержится в списке, или <c>false</c> в противном случае.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataObjectViewList.Count">
            <summary>
            Количество представлений в списке.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataObjectViewList.Item(System.Int32)">
            <summary>
            Получить представление по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataLookupValue">
            <summary>
            Содержит информацию о предопределенном значении свойстваю
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataLookupValue.Value">
            <summary>
            Значение.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataLookupValue.Caption">
            <summary>
            Заголовок (название) значения.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataLookupValueList">
            <summary>
            Содержит список преопределенных значений свойства.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataLookupValueList.Find(System.String)">
            <summary>
            Выполняет поиск предопределенного значения по действительному значению.
            </summary>
            <param name="value">Действительное значение.</param>
            <returns>Найденное преопределенное значение или <c>null</c>, 
            если значение не содержится в списке.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataLookupValueList.Item(System.Int32)">
            <summary>
            Возвращает предопределенное значение по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataProperty">
            <summary>
            Свойство реестрового объекта.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataProperty.FPurposeNames">
            <summary>
            Содержит возможные значения атрибута метаданных "property.purpose".
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataProperty.Class">
            <summary>
            Ссылается на класс, к которому относится свойство.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataProperty.Name">
            <summary>
            Содержит название свойства.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataProperty.LookupValues">
            <summary>
            Содержит список преопределенных значений свойства.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataProperty.Index">
            <summary>
            Содержит порядковый номер свойства в списке свойств класса.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataProperty.SetAssociation(Integro.InMeta.Runtime.MetadataAssociation)">
            <summary>
            Устанавливает ссылку на метаданные ассоциации.
            </summary>
            <param name="ass"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataProperty.#ctor(Integro.InMeta.Runtime.MetadataClass,System.String,System.Int32)">
            <summary>
            Инициализирует свойство.
            </summary>
            <param name="cls"></param>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataProperty.LoadFromXml(System.Xml.XmlNode)">
            <summary>
            Загружает характеристики свойства из узла Xml исходных метаданных.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataProperty.ValueFromXStr(Integro.InMeta.Runtime.DataSession,System.String)">
            <summary>
            Возвращает типизированное значение на основе заданного строкового значения в формате XStr.
            </summary>
            <param name="session">Сеанс работы с данными.</param>
            <param name="xStr">Значение в формате XStr.</param>
            <returns>Типизированное значение в соответствии с типом свойства.</returns>
            <remarks>Если значение параметра <c>xStr</c> - пустая строка или "{{null}}" будет возвращено значение <c>null</c>.
            </remarks>
            <remarks>Если данное свойство является ассоциацией с несколькими вариантами связи, будет сгенерировано исключение.
            </remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.Association">
            <summary>
            Возвращает ассоциацию, определяемую этим свойством.
            </summary>
            <remarks>Если данное свойство имеет назначение, 
            отличное от <c>association</c> и <c>aggregation</c>,
            то возвращаемое значение будет равно <c>null</c>.
            </remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.SourceNode">
            <summary>
            Возвращает узел XML исходных метаданных, откуда была произведена загрузка свойства.
            </summary>
            <remarks><c>SourceNode</c> может быть использовано для доступа к 
            дополнительным метаданным свойства, не определенным схемой метаданных ИнМета.
            </remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.Caption">
            <summary>
            Возвращает заголовок свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.DataField">
            <summary>
            Возвращает название поля данных в таблице СУБД, 
            в котором хранится значение данного свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.DataTypeName">
            <summary>
            Возвращает тип данных значения свойства в строковом виде.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.DataType">
            <summary>
            Возвращает тип данных значения свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.DataLength">
            <summary>
            Максимальный размер значения свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.InitialValue">
            <summary>
            Возвращает начальное значение свойства для новых объектов.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsExtension">
            <summary>
            Возвращает признак того, что данное свойство дополняет данный класс 
            на основе свойства дочернего объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.ExtensionClass">
            <summary>
            Возвращает название дочернего класса, дополняющего данный класс.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.ExtensionProperty">
            <summary>
            Возвращает название свойства в дочернем классе, 
            который дополняет данный класс.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.Purpose">
            <summary>
            Возвращает назначение свойства.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsSelector">
            <summary>
            Возвращает признак того, что свойство является 
            селектором связи с вариантами.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsUserField">
            <summary>
            Возвращает признак того, что свойство не является служебным 
            (служебными считаются id и переключатели связи).
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsLink">
            <summary>
            Возвращает признак того, что свойство является ссылкой на объект.
            </summary>
            <remarks>Ссылками являются свойства <c>association</c> 
            или <c>aggregation</c>.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsData">
            <summary>
            Возвращает признак того, что значение свойства является простым типом.
            </summary>
            <remarks>Простыми типами являются свойства <c>data</c>.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsId">
            <summary>
            Возвращает признак того, что свойство является идентификатором.
            </summary>
            <remarks>Идентификатором является свойство <c>id</c>.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsAssociation">
            <summary>
            Возвращает признак того, что свойство является ссылкой на объект.
            </summary>
            <remarks>Ссылкой на объект является свойство <c>association</c></remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.IsAggregation">
            <summary>
            Возвращает признак того, что свойство является ссылкой на родительский объект.
            </summary>
            <remarks>Ссылкой на родительский объект является свойство <c>aggregation</c></remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataProperty.MemberName">
            <summary>
            Возвращает имя члена в прикладном классе, представляющего данное свойство.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataPropertyList">
            <summary>
            Содержит список свойств реестрового объекта.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataPropertyList.GetEnumerator">
            <summary>
            Реализует IEnumerable.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataPropertyList.FItems">
            <summary>
            Хранит список свойств.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataPropertyList.#ctor">
            <summary>
            Инициализирует пустой список.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataPropertyList.Add(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Добавляет элемент в список.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataPropertyList.Find(System.String)">
            <summary>
            Производит поиск свойства по названию.
            </summary>
            <param name="name">Название свойства.</param>
            <returns>Найденное свойство или <c>null</c>, если свойство с указанным названием не найдено.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataPropertyList.Contains(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Возвращает признак того, что указанное свойство содержится в списке.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataPropertyList.Need(System.String)">
            <summary>
            Возвращает свойство по названию.
            </summary>
            <param name="name">Название свойства.</param>
            <returns>Свойство с указанным названием.</returns>
            <remarks>Если свойство с указанным названием 
            не найдено, генерируется исключение.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataPropertyList.Count">
            <summary>
            Возвращает количество свойств в списке.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MetadataPropertyList.Item(System.Int32)">
            <summary>
            Возвращает свойство по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataScriptLibrary">
            <summary>
            Содержит метаданные по библиотеке скриптов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataScriptLibrary.SourceNode">
            <summary>
            Возвращает исходный узел, из которого были загружены метаданные библиотеки скриптов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataScriptLibrary.Name">
            <summary>
            Возвращает название библиотеки скриптов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataScriptLibrary.Using">
            <summary>
            Возвращает список имен необходимых библиотек скриптов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataScriptLibrary.Language">
            <summary>
            Возвращает название языка программирования, используемого в библиотеке скриптов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataScriptLibrary.Text">
            <summary>
            Возвращает текст библиотеки скриптов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataScriptLibrary.#ctor(System.Xml.XmlNode)">
            <summary>
            Инициализирует метаданные библиотеки скриптов.
            </summary>
            <param name="sourceNode"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.MetadataScriptLibraries">
            <summary>
            Содержит метаданные всех библиотек скриптов приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.MetadataScriptLibraries.DefaultScriptLibraryText">
            <summary>
            Возвращает текст библиотеки скриптов по умолчанию.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MetadataScriptLibraries.Need(System.String)">
            <summary>
            Возвращает метаданные библиотеки скриптов по имени.
            </summary>
            <param name="name">Имя библиотеки скриптов.</param>
            <returns>Метаданные библиотеки скриптов.</returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.ScriptLibraries">
            <summary>
            Библиотеки скриптов, определенных в приложении.
            Используются для инициализации элементов управления серверными скриптами.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ScriptLibraries.AddScriptLibs(Scripting.ScriptControl,System.String[])">
            <summary>
            Подключает библиотеки скриптов в объект управления скриптами.
            </summary>
            <param name="control">Объект управления скриптом.</param>
            <param name="usingLibNames">Имена библиотек скриптов, которые следует подключить к объекту управления.</param>
            <remarks>Библиотека скриптов "по умолчанию" добавляется в виде текста к данному объекту 
            управления (при помощи метода AddCode).
            Именованные библиотеки, перечисленные в параметре usingLibNames, подключаются к объекту 
            управления посредством именованных объектов (используя метод AddObject). 
            Методы именованных объектов помещаются в область видимости скрипта.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.ScriptLibraries.Dispose(System.Boolean)">
            <summary>
            Завершает работу с сеансом.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ScriptLibraries.Dispose">
            <summary>
            Завершает работу с сеансом.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ScriptLibraries.Finalize">
            <summary>
            Завершает работу с сеансом.
            </summary>
        </member>
        <member name="T:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml">
            <summary>
            Summary description for XmlMetadata.
            </summary>
        </member>
        <member name="F:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.FolderPath">
            <summary>
            Каталог приложения.
            </summary>
        </member>
        <member name="F:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.Name">
            <summary>
            Имя приложения.
            </summary>
        </member>
        <member name="M:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.#ctor(System.String,System.String)">
            <summary>
            Инициализирует объект загрузки метаданных.
            </summary>
            <param name="inMetaRootFolder"></param>
            <param name="appName"></param>
        </member>
        <member name="M:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.Reload">
            <summary>
            Перезагружает метаданные.
            </summary>
        </member>
        <member name="M:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.GetIncompleteMetadata(System.Collections.Generic.Dictionary{System.String,System.Xml.XmlElement}@,System.Collections.Generic.List{System.Xml.XmlElement}@)">
            <summary>
            Возвращает не дополненные метаданные.
            </summary>
            <returns></returns>
        </member>
        <member name="P:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.Id">
            <summary>
            Возвращает идентификатор приложения.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.Metadata">
            <summary>
            Возвращает документ, содержащий полные метаданные приложения.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.MetadataXml">
            <summary>
            Возвращает содержимое полных метаданных в виде строки XML.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.ReducedMetadata">
            <summary>
            Возвращает служебные метаданные (без классов, библиотек скриптов и редакторов свойств).
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.ReducedMetadataXml">
            <summary>
            Возвращает содержимое служебных метаданных в виде строки XML.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.Metadata.ApplicationMetadataXml.ConnectionParams">
            <summary>
            Возвращает узел "driver" из файла "_db_info.xml".
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ApplicationUser">
            <summary>
            Содержит информацию о пользователе.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationUser.SourceNode">
            <summary>
            Содержит узел метаданных, из которого была произведена 
            загрузка информации о пользователе.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationUser.Account">
            <summary>
            Содержит учетную запись.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationUser.Caption">
            <summary>
            Возвращает заголовок. Если заголовок не задан, возвращает название учетной записи.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationUser.ContextName">
            <summary>
            Содержит название контекста пользователя.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ApplicationUserList">
            <summary>
            Содержит список пользователей.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ApplicationUserList.FindByAccount(System.String)">
            <summary>
            Производит поиск информации о пользователе по учетной записи.
            </summary>
            <param name="account">Учетная записть.</param>
            <returns>Информация о пользователе или <c>null</c>, 
            если учетная запись не найдена.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ApplicationUserList.NeedByAccount(System.String)">
            <summary>
            Возвращает информацию о пользователе по учетной записи.
            </summary>
            <param name="account">Учетная запись.</param>
            <returns>Информация о пользователе.</returns>
            <remarks>Если учетная запись не найдена, будет сгенерирована ошибка.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.ApplicationUserList.Item(System.Int32)">
            <summary>
            Возвращает информацию о пользователе по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ApplicationDbConfig">
            <summary>
            Содержит параметры подключения к БД.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationDbConfig.SourceNode">
            <summary>
            Содержит узел метаданных, из которого была загружена информация.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationDbConfig.DriverName">
            <summary>
            Содержит название драйвера. (ADODB.MSSQL).
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationDbConfig.Parameters">
            <summary>
            Содержит перечень параметров подключения.
            </summary>
            <remarks>Набор параметров подключения зависит от типа драйвера.</remarks>
        </member>
        <member name="T:Integro.InMeta.Runtime.ApplicationConfig">
            <summary>
            Содержит конфигурацию приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationConfig.SourceNode">
            <summary>
            Содержит узел метаданных, из которого загружалась конфигурация.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.AttachmentsSettings">
            <summary>
             Настройки приложения, относящиеся к прикрепляемым файлам.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.AttachmentsSettings.SourceNode">
            <summary>
            Исходный узел конфигурации config/Attachments.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.AttachmentsSettings.DefaultFolder">
            <summary>
            Пака хранения прикрепленных файлов, используемая по умолчанию для всех классов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.AttachmentsSettings.GetClassFolder(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
             Возвращает папку хранения прикрепленных файлов для заданного класса.
            </summary>
            <param name="cls"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.AttachmentsSettings.GetObjectFolder(Integro.InMeta.Runtime.MetadataClass,Integro.InMeta.Runtime.DataId)">
            <summary>
             Возвращает папку хранения прикрепленных файлов для заданного реестрового объекта.
            </summary>
            <param name="cls"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.ApplicationSettings">
            <summary>
            Предоставляет доступ к настройкам приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.SourceNode">
            <summary>
            Содержит корневой узел служебных метаданных,
            из которого была произведена загрузка настроек.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.Url">
            <summary>
            Содержит базовый URL приложения, 
            заданный в элементе метаданных "config/app-path".
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.RootFolder">
            <summary>
            Содержит полный путь к папке приложения на сервере.
            </summary>
            <remarks>Путь не содержит завершающего символа '\'.</remarks>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.Name">
            <summary>
            Содержит название приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.Config">
            <summary>
            Содержит конфигурацию приложения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.DbConfig">
            <summary>
            Содержит параметры подключения к БД.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.Users">
            <summary>
            Содержит список пользователей.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ApplicationSettings.Attachments">
            <summary>
             Настройки, относящиеся к прикрепляемым файлам.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ApplicationSettings.GetLocalSettings(System.String,System.String)">
            <summary>
            Возвращает параметр настройки, содержащийся в разделе LocalSettings.
            </summary>
            <param name="path">Путь к узлу параметра относительно элемента LocalSettings.</param>
            <param name="def">Значение по умолчанию.</param>
            <returns>Текст узла параметра, или def, если указанный параметр не найден.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.ApplicationSettings.LogEnabled">
            <summary>
            Возвращает признак разрешения ведения системного журнала серверной среды выполнения.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ApplicationSettings.LogFileName">
            <summary>
            Возвращает имя файла системного журнала.
            </summary>
            <remarks>
            Имя файла задается относительно базового каталога приложения.
            </remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.ApplicationSettings.LogEncoding">
            <summary>
            Возвращает кодировку файла системного журнала.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.ReadOnlyDataObject">
            <summary>
             Передоставляет доступ только для чтения к реестровому объекту.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.#ctor(Integro.InMeta.Runtime.DataObject)">
            <summary>
             Инициализирует объект доступа.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.GetValue(System.String)">
            <summary>
            Возвращает значение указанного свойства.
            </summary>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.GetLink(System.String)">
            <summary>
             Возвращает ссылку на связанный объект по заданной ассоциации.
            </summary>
            <param name="propertyPath"></param>
            <returns></returns>
            <exception cref="T:Integro.InMeta.Runtime.InMetaException"></exception>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.GetView(System.String)">
            <summary>
             Возвращает текст представления объекта.
            </summary>
            <param name="viewPath"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.GetChildCount(System.String)">
            <summary>
             Возвращает количество дочерних объектов указанного класса.
            </summary>
            <param name="childClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.GetChild(System.String,System.Int32)">
            <summary>
             Возвращает дочерний объект указанного класса с заданным индексом.
            </summary>
            <param name="childClassName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.GetChildArray(System.String)">
            <summary>
             Возвращает массив дочерних объектов указанного класса.
            </summary>
            <param name="childClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.ReadOnlyDataObject.GetSortedChildArray(System.String,System.String)">
            <summary>
             Возвращает массив дочерних объектов указанного класса, отсортированный по заданному свойству.
            </summary>
            <param name="childClassName"></param>
            <param name="sortProperties"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.ReadOnlyDataObject.Id">
            <summary>
             Возвращает идентификатор объекта.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ReadOnlyDataObject.IsNull">
            <summary>
             Возвращает признак того, что объект является <i>пустым</i>.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.HtmlFormatter">
            <summary>
             Базовый класс для построителей форматированного текста Html.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.HtmlFormatter.EncodeHtml(System.String)">
            <summary>
             Преобразовывает произвольный текст в текст, пригодный для вставки в Html.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.HtmlFormatter.AppendText(System.Text.StringBuilder,System.String)">
            <summary>
             Добавляет произвольный текст в виде, пригодном для вставки в Html.
            </summary>
            <param name="html"></param>
            <param name="text"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.HtmlFormatter.AppendText(System.Text.StringBuilder,System.String,System.String)">
            <summary>
             Добавляет произвольный текст в виде, пригодном для вставки в Html, обрамляя элементом с заданным стилем.
            </summary>
            <param name="html"></param>
            <param name="text"></param>
            <param name="style"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.ScriptRuntimeCurrentUser">
            <summary>
            Содержит информацию о пользователе, в контексте которого выполняется скрипт.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ScriptRuntimeCurrentUser.#ctor(Integro.InMeta.Runtime.DataSession)">
            <summary>
             Инициализирует информацию о пользователе, в контексте которого работает сеанс.
            </summary>
            <param name="session"></param>
        </member>
        <member name="P:Integro.InMeta.Runtime.ScriptRuntimeCurrentUser.Account">
            <summary>
             Возвращает название учетной записи пользователя.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ScriptRuntimeCurrentUser.Caption">
            <summary>
             Возвращает заголовок пользователя.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ScriptRuntimeCurrentUser.Context">
            <summary>
            Возвращает название рабочего места, к которому относится пользователь.
            </summary>
            
        </member>
        <member name="P:Integro.InMeta.Runtime.ScriptRuntimeCurrentUser.SourceNode">
            <summary>
            Возвращает узел метаданных, относящийся к пользователю.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.ScriptRuntimeCurrentUser.Registered">
            <summary>
            Возвращает признак того, что пользователь зарегистрирован в системе.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MsXmlDocumentEmulator">
            <summary>
            Эмулирует интерфейс IXMLDOMDocument на основе XmlDocument
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlDocumentEmulator.#ctor(System.Xml.XmlDocument)">
            <summary>
             Инициализирует эмулятор.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlDocumentEmulator.createElement(System.String)">
            <summary>
             Создает элемент.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlDocumentEmulator.createCDATASection(System.String)">
            <summary>
             Создает узел CDATA.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MsXmlDocumentEmulator.documentElement">
            <summary>
             Возвращает корневой элемент документа.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MsXmlNodeEmulator">
            <summary>
            Эмулирует интерфейс IXMLDOMElement на основе объекта <c>XmlNode</c>.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.#ctor(System.Xml.XmlNode,Integro.InMeta.Runtime.MsXmlDocumentEmulator)">
            <summary>
             Инициализирует эмулятор.
            </summary>
            <param name="node"></param>
            <param name="document"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.Wrap(System.Object)">
            <summary>
             Оборачивает объект XML эмулятором.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.AppendChild(System.Object)">
            <summary>
             Добавляет дочерний узел.
            </summary>
            <param name="nodeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.RemoveChild(System.Object)">
            <summary>
             Удаляет дочерний узел.
            </summary>
            <param name="nodeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.GetAttribute(System.String)">
            <summary>
             Возвращает значение атрибута.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.SetAttribute(System.String,System.String)">
            <summary>
             Изменяет значение атрибута.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.SelectNodes(System.String)">
            <summary>
             Выполняет выборку дочерних узлов по заданному условию.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.SelectSingleNode(System.String)">
            <summary>
             Выполняет поиск первого дочернего узла по заданному условию.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.NeedChild(System.String)">
            <summary>
             Возвращает первый дочерний элемент с указанным именем, или генерирует исключение.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.GetChildText(System.String)">
            <summary>
             Возвращает текст дочернего элемента с указанным именем или пустую строку, если элемента нет.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.HasAttribute(System.String)">
            <summary>
             Возвращает признак того, что узел содержит атрибут с указанным именем.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeEmulator.AppendElement(System.String)">
            <summary>
             Добавляет дочерний элемент с указанным именем.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.MsXmlNodeEmulator.OwnerDocument">
            <summary>
             Возвращает документ, к которому относится элемент.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MsXmlNodeEmulator.ParentNode">
            <summary>
             Возвращает родительский элемент.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MsXmlNodeEmulator.OwnText">
            <summary>
             Возвращает собственный текст узла.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.MsXmlNodeListEmulator">
            <summary>
            Эмулирует интерфейс IXMLDOMNodeList на основе объекта XmlNodeList.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.MsXmlNodeListEmulator.#ctor(System.Xml.XmlNodeList,Integro.InMeta.Runtime.MsXmlDocumentEmulator)">
            <summary>
            Инициализирует эмулятор.
            </summary>
            <param name="nodes"></param>
            <param name="document"></param>
        </member>
        <member name="P:Integro.InMeta.Runtime.MsXmlNodeListEmulator.length">
            <summary>
             Возвращает количество элементов в коллекции.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.MsXmlNodeListEmulator.Item(System.Int32)">
            <summary>
             Возвращает элемент коллекции по порядковому номеру (начиная с нуля).
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.ScriptErrorFormatter">
            <summary>
             Обеспечивает форматирование исходного кода на языке VbScript в текст Html.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.ScriptErrorFormatter.FormatCodeAndHighlightErrorLine(System.Text.StringBuilder,System.String,System.Int32)">
            <summary>
             Добавляет отформатированный исходный кода на языке VbScript в построитель текста Html.
            </summary>
            <param name="html"></param>
            <param name="code"></param>
            <param name="errorLine"></param>
        </member>
        <member name="T:InMeta.ServerRuntime.ScriptRuntimeDataObject">
            <summary>
             Обеспечивает доступ к реестровому объекту со стороны серверных скриптов.
            </summary>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.#ctor(Integro.InMeta.Runtime.DataObject)">
            <summary>
             Инициализирует объект доступа.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.GetPropertyTypedValue(Integro.InMeta.Runtime.DataObject,System.String)">
            <summary>
             Возвращает значение свойства объекта.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.GetPropertyText(Integro.InMeta.Runtime.DataObject,System.String)">
            <summary>
             Возвращает значение свойства в формате <c>XStr</c>.
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.GetPropertyDisplayText(Integro.InMeta.Runtime.DataObject,System.String)">
            <summary>
             Возвращает значение свойства в текстовом виде (пригодном для отображения пользователю).
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.IsPropertyNull(System.String)">
            <summary>
             Возвращает признак того, что указанное свойство содержит пустое значение (NULL).
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.IsPropertyModified(System.String)">
            <summary>
             Возвращает признак того, что указанное свойство было изменено в рамках сеанса.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.GetValue(System.String)">
            <summary>
             Возвращает значение свойства.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.SetValue(System.String,System.Object)">
            <summary>
             Устанавливает значение свойства.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.GetLink(System.String)">
            <summary>
             Возвращает связанный объект.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.SetLink(System.String,InMeta.ServerRuntime.ScriptRuntimeDataObject)">
            <summary>
             Устанавливает связанный объект.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObject.GetChildren(System.String)">
            <summary>
             Возвращает список дочерних объектов указанного класса.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObject.Id">
            <summary>
             Возвращает идентификатор объекта. 
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObject.ClassName">
            <summary>
             Возвращает название класса реестрового объекта или пустую строку, если объект является нетипизированным пустым объектом. 
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObject.IsNull">
            <summary>
             Возвращает признак того, что объект является нулевым.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObject.IsNew">
            <summary>
             Возвращает признак того, что объект был создан в рамках сеанса.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObject.IsDeleted">
            <summary>
             Возвращает признак того, что объект был удален в рамках сеанса.
            </summary>
        </member>
        <member name="T:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList">
            <summary>
             Обеспечивает доступ к списку дочерних объектов.
            </summary>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList.#ctor(Integro.InMeta.Runtime.DataObjectChildList)">
            <summary>
             Инициализирует объект доступа.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList.AddNew">
            <summary>
             Создает новый дочерний объект.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList.DeleteAll">
            <summary>
             Удаляет все дочерние объекты.
            </summary>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList.Sort(System.String)">
            <summary>
             Выполняет сортировку дочерних объектов по указанным свойствам.
            </summary>
            <param name="propertyNames">Список свойств, разделенных запятыми. 
             Порядок сортировки можно регулировать суффиксом<c>ASC</c> или <c>DESC</c>.</param>
             <example>Sort("LastName, FirstName DESC")</example>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList.Count">
            <summary>
             Возвращает количество дочерних объектов.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList.Item(System.Int32)">
            <summary>
             Возвращает элемент списка по индексу.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObjectChildList.First">
            <summary>
            Возвращает первый элемент списка или нулевой объект, если список пуст.
            </summary>
        </member>
        <member name="T:InMeta.ServerRuntime.ScriptRuntimeDataObjectList">
            <summary>
             Список объектов доступа к реестровым объектам.
            </summary>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObjectList.#ctor(Integro.InMeta.Runtime.DataObjectList)">
            <summary>
             Инициализирует список.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:InMeta.ServerRuntime.ScriptRuntimeDataObjectList.Sort(System.String)">
            <summary>
            Выполняет сортировку списка по значениям указанных свойств.
            </summary>
            <param name="propertyNames">Список названий свойств, 
            разделенных запятой.</param>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObjectList.Count">
            <summary>
             Возвращает количество объектов в списке.
            </summary>
        </member>
        <member name="P:InMeta.ServerRuntime.ScriptRuntimeDataObjectList.Item(System.Int32)">
            <summary>
            Возвращает элемент списка по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.XmlToHtmlFormatter">
            <summary>
             Обеспечивает преобразование документа Xml в читаемый вид в формате Html.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlToHtmlFormatter.GetElementHtml(System.Xml.XmlNode,System.String)">
            <summary>
             Фозвращает форматированный текст для узла Xml.
            </summary>
            <param name="element"></param>
            <param name="indent"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlToHtmlFormatter.AppendXmlElement(System.Text.StringBuilder,System.Xml.XmlNode,System.String)">
            <summary>
             Добавляет форматированный текст узла Xml в посторитель Html.
            </summary>
            <param name="html"></param>
            <param name="element"></param>
            <param name="indent"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.XmlUtilsEmulator">
            <summary>
             Эмулятор интерфейса InMetaUtils.InMetaXmlUtils
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.GetNodeText(System.Object)">
            <summary>
             Возвращает собственный текст узла.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.SetNodeText(System.Object,System.String,System.Boolean)">
            <summary>
             Заменяет собственный текст узла.
            </summary>
            <param name="node"></param>
            <param name="text"></param>
            <param name="asCdata"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.GetSubNode(System.Object,System.String)">
            <summary>
             Возвращает первый дочерний элемент с указанным именем, или генерирует исключение.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.GetSubNodeText(System.Object,System.String)">
            <summary>
             Возвращает собственный текст дочернего элемента с указанным именем, или генерирует исключение, если такого элемента нет.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.GetChildText(System.Object,System.String)">
            <summary>
             Возвращает текст дочернего элемента с указанным именем или пустую строку, если элемента нет.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.HasAttr(System.Object,System.String)">
            <summary>
             Возвращает признак того, что узел содержит атрибут с указанным именем.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.GetAttr(System.Object,System.String,System.String)">
            <summary>
             Возвращает значение атрибута или значение по умолчанию.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.SetAttr(System.Object,System.String,System.String)">
            <summary>
             Изменяет значение атрибута.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.NeedAttr(System.Object,System.String)">
            <summary>
             Возвращает значение обязательного атрибута или генерирует исключение.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.NeedId(System.Object)">
            <summary>
             Возвращает значение обязательного атрибута "id".
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.AddElement(System.Object,System.String,System.String,System.Boolean)">
            <summary>
             Добавляет дочерний элемент с указанным именем и текстом.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="text"></param>
            <param name="textAsCdata"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XmlUtilsEmulator.CreateDoc(System.String)">
            <summary>
             Создает новый документ с опционально заданным корневым элементом.
            </summary>
            <param name="rootName"></param>
            <returns></returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.XStrUtilsEmulator">
            <summary>
             Набор утилитных функций для обработки строк в формате <c>XStr</c>
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.VariantToXStr(System.Object)">
            <summary>
             Преобразует значение в строку <c>XStr</c>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToVariant(System.String,System.String)">
            <summary>
            Переводит aValue в Variant в соответствии с aDataType
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToVariantDef(System.String,System.String,System.Object)">
            <summary>
             Преобразует строку <c>XStr</c> в значение заданного типа
            </summary>
            <param name="value"></param>
            <param name="dataType"></param>
            <param name="defValue"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.StrToXStr(System.Object)">
            <summary>
             Преобразует строковое значение в формат <c>XStr</c>
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToStr(System.String)">
            <summary>
             Преобразует строку в формате <c>XStr</c> в строковое значение
            </summary>
            <param name="xStr"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.BoolToXStr(System.Object)">
            <summary>
             Преобразует логическое значение в формат <c>XStr</c>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToBool(System.String)">
            <summary>
             Преобразует строку в формате <c>XStr</c> в логическое значение
            </summary>
            <param name="xStr"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.DateTimeToXStr(System.Object)">
            <summary>
             Преобразует значение даты/времени в формат <c>XStr</c>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToDateTime(System.String)">
            <summary>
             Преобразует строку в формате <c>XStr</c> в значение даты/времени
            </summary>
            <param name="xStr"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.LngToXStr(System.Object)">
            <summary>
             Преобразует целочисленное значение в формат <c>XStr</c>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToLng(System.String)">
            <summary>
             Преобразует строку в формате <c>XStr</c> в целочисленное значение
            </summary>
            <param name="xStr"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.DblToXStr(System.Object)">
            <summary>
             Преобразует числовое значение в формат <c>XStr</c>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToDbl(System.String)">
            <summary>
             Преобразует строку в формате <c>XStr</c> в числовое значение
            </summary>
            <param name="xStr"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.CurToXStr(System.Object)">
            <summary>
             Преобразует значение денежной единицы в формат <c>XStr</c>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrToCur(System.String)">
            <summary>
             Преобразует строку в формате <c>XStr</c> в значение денежной единицы
            </summary>
            <param name="xStr"></param>
            <returns></returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.XStrUtilsEmulator.XStrNULL">
            <summary>
             Строковое представление для значения NULL
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataApplication">
            <summary>
            Представляет приложение ИнМета.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.CreateSessionInstance(System.String)">
            <summary>
            Создает экземпляр сеанса.
            </summary>
            <param name="userAccount">Учетная запись, под которой будет 
            работать новый сеанс.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.#ctor(System.String,System.String)">
            <summary>
            Инициализирует приложение.
            </summary>
            <param name="id">Идентификатор.</param>
            <param name="centralServerAddress">Адрес центрального сервера.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.Init(System.String,System.String)">
            <summary>
            Инициализирует приложение.
            </summary>
            <param name="id">Идентификатор.</param>
            <param name="centralServerAddress">Адрес центрального сервера.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.Dispose(System.Boolean)">
            <summary>
            Производит завершение работы с приложением.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.Dispose">
            <summary>
            Производит завершение работы с приложением.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.Finalize">
            <summary>
            Финализирует приложение.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.CreateSession(System.String)">
            <summary>
            Создает экземляр сеанса с заданной учетной записью.
            </summary>
            <param name="userAccount">Учетная запись.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.CreateSession">
            <summary>
            Создает экземляр сеанса с учетной записью текущего пользователя.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.GetAppIds(System.String)">
            <summary>
            Получить список идентификаторов приложений с указанного 
            центрального ИнМета-сервера.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.Reload">
            <summary>
            Произвести перезагрузку приложения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.EncryptDbLoginPassword">
            <summary>
            Выполняет шифрование пароля доступа к БД, хранящегося в файле _db_info.xml.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplication.Metadata">
            <summary>
            Возвращает метаданные приложения.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplication.Settings">
            <summary>
            Возвращает настройки приложения.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplication.Log">
            <summary>
            Возвращает объект, управляющий записью в журнал приложения.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplication.Id">
            <summary>
            Возвращает идентификатор приложения.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplication.CentralServerAddress">
            <summary>
            Возвращает сетевой адрес центрального сервера.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplication.InMetaInstallPath">
            <summary>
            Возвращает каталог установки серверной среды системы ИнМета.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplication.IsDbLoginPasswordEncrypted">
            <summary>
            Возвращает признак того, что пароль доступа к БД хранится в зашифрованном виде.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataApplication.ApplicationLog">
            <summary>
            Предназначен для протоколирования выполняемых работ.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.ApplicationLog.#ctor(Integro.InMeta.Runtime.DataApplicationState)">
            <summary>
            Инициализирует журнал приложения.
            </summary>
            <param name="applicationState"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataApplication.ApplicationLog.AppendRecord(System.Int32,System.String,System.String,System.String)">
            <summary>
            Добавляет запись в журнал.
            </summary>
            <param name="parentRecordId">Идентификатор родительской записи.</param>
            <param name="authUserName">Название учетной записи пользователя.</param>
            <param name="source">Источник записи.</param>
            <param name="text">Текст записи.</param>
            <returns>Идентификатор добавленной записи.</returns>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplicationState.Metadata">
            <summary>
            Возвращает метаданные приложения.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataApplicationState.Settings">
            <summary>
            Возвращает настройки приложения.
            </summary>
        </member>
        <member name="T:Integro.InDbs.DataType">
            Определяет тип данных свойства.
        </member>
        <member name="F:Integro.InDbs.DataType.BaseMask">
            Маска базового типа.
        </member>
        <member name="F:Integro.InDbs.DataType.Unknown">
            Тип данных неопределен.
        </member>
        <member name="F:Integro.InDbs.DataType.Boolean">
            Логический.
        </member>
        <member name="F:Integro.InDbs.DataType.Integer">
            Целочисленный 32-битовый.
        </member>
        <member name="F:Integro.InDbs.DataType.Float">
            Числовой с плавающей точкой.
        </member>
        <member name="F:Integro.InDbs.DataType.Currency">
            Денежная единица.
        </member>
        <member name="F:Integro.InDbs.DataType.DateTime">
            Дата/время.
        </member>
        <member name="F:Integro.InDbs.DataType.Date">
            Дата (подтип <c>DateTime</c>).
        </member>
        <member name="F:Integro.InDbs.DataType.Time">
            Время (подтип <c>DateTime</c>).
        </member>
        <member name="F:Integro.InDbs.DataType.String">
            Строка.
        </member>
        <member name="F:Integro.InDbs.DataType.Memo">
            Многострочный текст.
        </member>
        <member name="F:Integro.InDbs.DataType.Binary">
            Двоичный нетипизированный.
        </member>
        <member name="F:Integro.InDbs.DataType.Picture">
            Изображение (подтип <c>Binary</c>).
        </member>
        <member name="F:Integro.InDbs.DataType.Document">
            OLE-документ (подтип <c>Binary</c>).
        </member>
        <member name="T:Integro.InDbs.InDbException">
            Определяет класс ошибок подсистемы доступа к данным.
        </member>
        <member name="M:Integro.InDbs.InDbException.#ctor">
            <summary>
            Инициализирует объект.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Инициализирует объект при восстановлении из потока.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Integro.InDbs.InDbException.#ctor(System.String,System.Exception)">
            Инициализирует объект текстом сообщения и объектом - причиной исключения.
        </member>
        <member name="M:Integro.InDbs.InDbException.#ctor(System.String)">
            Инициализирует объект текстом сообщения.
        </member>
        <member name="T:Integro.InDbs.InDbUtils">
            Предоставляет набор вспомогательных функций.
        </member>
        <member name="M:Integro.InDbs.InDbUtils.DataTypeToDbType(Integro.InDbs.DataType)">
            Преобразует значение <c>DataType</c> в соответствующее ему значение <c>DbType</c>.
            <param name="dt">Исходное значение.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbUtils.IsVariableLengthDbType(System.Data.DbType)">
            <summary>
             Возвращает признак того, что значения указанного типа имеют переменную длинну.
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbUtils.IsVariableLengthDataType(Integro.InDbs.DataType)">
            <summary>
             Возвращает признак того, что значения указанного типа имеют переменную длинну.
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbUtils.DataTypeToTypeCode(Integro.InDbs.DataType)">
            <summary>
            Преобразует тип.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbUtils.DbTypeToDataType(System.Data.DbType)">
            <summary>
            Преобразовать значение <c>DbType</c> в соответствующее ему значение <c>DataType</c>.
            </summary>
            <param name="dt">Исходное значение.</param>
            <exception cref="T:Integro.InDbs.InDbException"></exception>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbUtils.InMetaDataTypeToDataType(System.String)">
            <summary>
            Преобразует тип.
            </summary>
            <param name="inMetaDt"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbUtils.Convert(System.Object,Integro.InDbs.DataType)">
            <summary>
            Приводит значение к указанному типу.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbUtils.TypeCodeToDataType(System.TypeCode)">
            <summary>
            Преобразует TypeCode в соответствующий DateType.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Integro.InDbs.InDbCommand">
            <summary>
            Представляет команду БД.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbCommand.ExecuteReader(System.Object[])">
            <summary>
            Выполняет команду и возвращает набор данных.
            </summary>
            <param name="paramValues"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbCommand.Execute(System.Object[])">
            <summary>
            Выполняет команду и возвращает количество обработанных записей.
            </summary>
            <param name="paramValues"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbCommand.Dispose(System.Boolean)">
            <summary>
            Уничтожает команду и освобождает связанные с ней рессурсы.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbCommand.Dispose">
            <summary>
            Уничтожает команду и освобождает связанные с ней рессурсы.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbCommand.Finalize">
            <summary>
            Финализирует объект.
            </summary>
        </member>
        <member name="T:Integro.InDbs.InDbDatabase">
            <summary>
            Предоставляет доступ к БД.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.SameIdentifiers(System.String,System.String)">
            <summary>
            Проверка двух идентификаторов на равенство
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbDatabase.DateTimeMinValue">
            <summary>
            Возвращает минимально допустимое значение для дат.
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbDatabase.DateTimeMaxValue">
            <summary>
            Возвращает максимально допустимое значение для дат.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.IsAcceptable(System.DateTime)">
            <summary>
            Выполняет проверку на то, что указанное значение даты лежит в допустимых пределах.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.CreateCommand(System.String,Integro.InDbs.DataType[])">
            <summary>
            Создает объект для выполнения SQL-запросов.
            </summary>
            <param name="sql">Текст запроса.</param>
            <param name="paramTypes">Массив типов параметров запроса.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.Execute(System.String)">
            <summary>
            Выполняет sql запрос
            </summary>
            <param name="sql">sql запрос</param>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.BeginTransaction">
            <summary>
            Начинает транзакцию.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.CommitTransaction">
            <summary>
            Фиксирует транзакцию.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.RollbackTransaction">
            <summary>
            Отменяет транзакцию.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.TableExists(System.String)">
            <summary>
            Возвращает признак существования таблицы.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.ApplyTableStructure(Integro.InDbs.InDbTableDef)">
            <summary>
            Вносит изменения структуры таблицы в базу данных
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.LoadTableDef(Integro.InDbs.InDbTableDef)">
            <summary>
            Загружает структуру существующей таблицы.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.GetTableDef(System.String)">
            <summary>
            Возвращает описание структуры существующей таблицы.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.NewTable(System.String)">
            <summary>
            Создает новую пустую таблицу.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.DeleteTable(System.String)">
            <summary>
            Удаляет таблицу.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.Dispose(System.Boolean)">
            <summary>Завершает работу с объектом.</summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.GetTableNames">
            <summary>
            Возвращает список описателей таблиц
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.Dispose">
            <summary>Завершает работу с объектом.</summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.#ctor">
            <summary>
            Инициализирует минимальные и максимальные значения для дат.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Инициализирует минимальные и максимальные значения для дат.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbDatabase.Finalize">
            <summary>Звершает работу с объектом.</summary>
        </member>
        <member name="T:Integro.InDbs.InDbIndexDef">
            <summary>
            Индекс схемы таблицы
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbIndexDef.FieldDefs">
            <summary>
            Список полей, входящих в индекс
            </summary>
        </member>
        <member name="P:Integro.InDbs.InDbIndexDef.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="T:Integro.InDbs.InDbFieldDef">
            <summary>
            Поле схемы таблицы 
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbFieldDef.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbFieldDef.DataType">
            <summary>
            Тип
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbFieldDef.Size">
            <summary>
            Размер (только для строк)
            </summary>
        </member>
        <member name="T:Integro.InDbs.InDbFieldDefs">
            <summary>
            Список полей таблицы
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbFieldDefs.IndexOf(System.String)">
            <summary>
            Индекс поля в списке
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbFieldDefs.GetFieldNames">
            <summary>
            Возвращает список имен полей
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbFieldDefs.GetEnumerator">
            
        </member>
        <member name="P:Integro.InDbs.InDbFieldDefs.Item(System.Int32)">
            <summary>
            Поле по индексу
            </summary>
        </member>
        <member name="P:Integro.InDbs.InDbFieldDefs.Item(System.String)">
            <summary>
            Поле по имени
            </summary>
        </member>
        <member name="P:Integro.InDbs.InDbFieldDefs.Count">
            
        </member>
        <member name="T:Integro.InDbs.InDbIndexDefs">
            <summary>
            Список индексов таблицы
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbIndexDefs.IndexOf(System.String)">
            <summary>
            Порядковый номер по имени
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbIndexDefs.IndexOf(Integro.InDbs.InDbIndexDef)">
            <summary>
            Порядковый номер по экземпляру индекса
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbIndexDefs.GetEnumerator">
            
        </member>
        <member name="P:Integro.InDbs.InDbIndexDefs.Item(System.Int32)">
            <summary>
            Индекс по порядковому номеру
            </summary>
        </member>
        <member name="P:Integro.InDbs.InDbIndexDefs.Item(System.String)">
            <summary>
            Индекс по имени
            </summary>
        </member>
        <member name="P:Integro.InDbs.InDbIndexDefs.Count">
            
        </member>
        <member name="T:Integro.InDbs.InDbTableDef">
            Структура таблицы
        </member>
        <member name="F:Integro.InDbs.InDbTableDef.FieldDefs">
            <summary>
            Список полей
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbTableDef.IndexDefs">
            <summary>
            Список индексов
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbTableDef.PrimaryKey">
            <summary>
            Первичный ключ
            </summary>
        </member>
        <member name="F:Integro.InDbs.InDbTableDef.Name">
            <summary>
            Имя
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbTableDef.AddNewFieldDef(System.String,Integro.InDbs.DataType,System.Int32)">
            <summary>
            Добавить новое поле
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbTableDef.AddNewFieldDef(System.String,Integro.InDbs.DataType)">
            <summary>
            Добавить новое поле
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbTableDef.DeleteFieldDef(System.String,System.Boolean)">
            <summary>
            Удалить поле
            </summary>
            <param name="name"/>
            <param name="autoCorrectIndexes">Исправлять индексы, в которые входило данное поле</param>
        </member>
        <member name="M:Integro.InDbs.InDbTableDef.AddNewIndexDef(System.String[])">
            <summary>
            Добавить новый индекс
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbTableDef.DeleteIndexDef(System.Int32)">
            <summary>
            Удалить индекс
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbTableDef.ApplyChanges">
            <summary>
            Внести изменения (если были) в базу данных
            </summary>
        </member>
        <member name="P:Integro.InDbs.InDbTableDef.Modified">
            <summary>
            Показывает, модифицировалась ли структура таблицы
            </summary>
        </member>
        <member name="T:Integro.InDbs.InDbManager">
            <summary>
            Класс унифицированного доступа к данным.
            </summary>
        </member>
        <member name="M:Integro.InDbs.InDbManager.SameDatabase(System.String,System.Collections.Hashtable,System.String,System.Collections.Hashtable)">
            <summary>
            Выполняет сравнение параметров подключения к БД на предмет того, 
            что оба набора параметров описывают подключение к одной и той же БД.
            </summary>
            <param name="driver1">Имя драйвера БД 1</param>
            <param name="driver2">Имя драйвера БД 2</param>
            <param name="driverConfiguration1">Параметры подключения 1.</param>
            <param name="driverConfiguration2">Параметры подключения 2.</param>
            <returns>Признак подключения к одной БД.</returns>
        </member>
        <member name="M:Integro.InDbs.InDbManager.OpenDatabase(System.String,System.Collections.Hashtable)">
            <summary>
            Открывает объект доступа к БД.
            </summary>
            <param name="driverName">Название драйвера доступа к БД.</param>
            <param name="parameters">Параметры подключения.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InDbs.InDbManager.OpenDatabase(System.Xml.XmlNode)">
            <summary>
            Открывает объект доступа к БД.
            </summary>
            <param name="connectionParams">Параметры соединения.</param>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataSession">
            <summary>
            Представляет сеанс работы с серверной средой выполнения.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.FCentralServerConnection">
            <summary>Предоставляет доступ к центральному серверу.</summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.FDb">
            <summary>Объект доступа к БД.</summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.FUser">
            <summary>Текущий пользователь.</summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.FNewObjectsWithoutGeneratedId">
            <summary>
            Список новых объектов, для которых не сгенерированы идентификаторы.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.FStorages">
            <summary>
            Массив хранилищ объектов по классам.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.Application">
            <summary>
            Ссылка на приложение.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.UserAccount">
            <summary>
            Учетная запись текущего пользователя.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.TreatNullsAsZero">
            <summary>
            Возвращает/устанавливает признак того, что в рамках данного сеанса все пустые значения свойств следует трактовать как нулевые.
            </summary>
            <remarks>Если данный признак установлен, то при попытке чтения пустого значения свойства будет возвращено специальное нулевое значение.
            Нулевые значения для разных типов приведены в следующей таблице:
            <list type="table">
            <listheader><term>Тип</term><description>Нулевое значение</description></listheader>
            <item><term>Строковый</term><description>String.Empty</description></item>
            <item><term>Числовой</term><description>0</description></item>
            <item><term>Дата/время</term><description>DateTime.MinValue</description></item>
            <item><term>Логический</term><description><c>false</c></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.#ctor(Integro.InMeta.Runtime.DataApplication,System.String)">
            <summary>
            Инициализирует сеанс.
            </summary>
            <param name="application">Приложение.</param>
            <param name="userAccount">Учетная запись пользователя.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetLiveSessions">
            <summary>
            Возвращает список активных сеансов данных в текущем домене приложения.
            </summary>
            <remarks>Активными считаются сеансы, не уничтоженные сборщиком мусора.</remarks>
            <returns></returns>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.UntypedNullObject">
            <summary>
            Нетипизированный нулевой объект.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.CreateStorageInstance(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Создает экземпляр прикладного хранилища для указанного класса.
            </summary>
            <param name="cls"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.Dispose(System.Boolean)">
            <summary>
            Завершает работу с сеансом.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.Dispose">
            <summary>
            Завершает работу с сеансом.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.Finalize">
            <summary>
            Завершает работу с сеансом.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GenerateRegNo">
            <summary>
            Генерирует новый реестровый номер.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GenerateCustomId(System.String)">
            <summary>
            Генерирует новый прикладной идентификатор.
            </summary>
            <param name="generatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GenerateCustomIds(System.String,System.Int32)">
            <summary>
            Генерирует набор новых прикладных идентификаторов.
            </summary>
            <param name="generatorName"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.ReleaseCustomIds(System.String,System.Int32[])">
            <summary>
            Освобождает сгенерированные ранее прикладные идентификаторы.
            </summary>
            <param name="generatorName">Название прикладного счетчика.</param>
            <param name="ids">Список освобождаемых идентификаторов.</param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetCustomIdGenerators">
            <summary>
            Возвращает список генераторов прикладных идентификаторов.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetIdGroups">
            <summary>
            Возвращает список групп идентификаторов.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetIdConverter(Integro.InMeta.Runtime.IdGroupList)">
            <summary>
            Возвращает преобразователь идентификаторов из источника данных в текущую БД.
            </summary>
            <param name="sourceGroups">Список групп идентификаторов внешнего источника данных.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GenerateId">
            <summary>
            Генерирует идентификатор.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GenerateIds(System.Int32)">
            <summary>
            Генерирует указанное количество идентификаторов.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.LoadData(Integro.InMeta.Runtime.LoadPlan,Integro.InMeta.Runtime.DataObjectList,Integro.InMeta.Runtime.DataId[],System.String,System.Object[])">
            <summary>
            Загружает данные по указанным объектам согласно заданному плану загрузки.
            </summary>
            <param name="plan">План загрузки данных.</param>
            <param name="dstObjs">Список в который будут добавлены загруженные объекты.</param>
            <param name="ids">Список идентификаторов объектов для загрузки.</param>
            <param name="condition">Условие отбора объектов.</param>
            <param name="paramArray">Параметры условия. Количество и порядок параметров 
            должно соответствовать количеству и порядку символов "?" в условии отбора.</param>
            <remarks>Параметры <c>ids</c> и <c>condition, param</c> взаимоисключаемые.
            Если параметр <c>ids</c> задан (не равен <c>null</c>), то параметры 
            <c>condition</c> и <c>param</c> будут проигнорированы.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.Commit(Integro.InMeta.Runtime.DataSession.CommitErrorList)">
            <summary>
            Применить все изменения, проделанные в рамках сеанса.
            </summary>
            <param name="errors"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.Commit">
            <summary>
            Применить все изменения, проделанные в рамках сеанса.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.Rollback">
            <summary>
            Отменить все изменения, проделанные в рамках сеанса.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.DropCache">
            <summary>
            Сбрасывает все загруженные и не измененные значения.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.SaveChangesToXml(System.Xml.XmlNode)">
            <summary>
            Сохраняет изменения, произведенные в рамках сеанса, в обменном формате.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.QueryCachedObjects(Integro.InMeta.Runtime.MetadataClass,Integro.InMeta.Runtime.DataObjectList)">
            <summary>
            Возвращает список всех объектов заданного класса, загруженных в память (кэш) сеанса.
            </summary>
            <param name="cls">Класс, объекты которого будут возвращены.</param>
            <param name="list">Список, в который будут помещены объекты.</param>
            <remarks>Перед добавлением список не очищается. В список будут помещены все объекты, включая удаленные и созданные в рамках сеанса.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.QueryCachedObjects(Integro.InMeta.Runtime.DataObjectList)">
            <summary>
            Возвращает список всех объектов, загруженных в память (кэш) сеанса.
            </summary>
            <param name="list">Список, в который будут помещены объекты.</param>
            <remarks>Перед добавлением список не очищается. В список будут помещены все объекты, включая удаленные и созданные в рамках сеанса.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.QueryExternalLinks(Integro.InMeta.Runtime.DataObject[])">
            <summary>
            Возвращает список объектов, ссылающихся на заданные объекты.
            </summary>
            <param name="objects">Список объектов, для которых необходимо получить список внешних ссылок.</param>
            <returns>Список внешних ссылок для каждого затребованного объекта.</returns>
            <remarks>Набор элементов возвращаемого массива соответствует массиву <c>objects</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetContextStr(System.String,System.String)">
            <summary>
            Возвращает строку из контекста пользователя, который относится к данному сеансу.
            </summary>
            <param name="xPath">Строка поиска в контексте пользователя.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Текст найденного элемента контекста.</returns>
            <remarks>Если контекст пользователя не содержит запрошенного 
            элемента, будет возвращено значение параметра <c>defaultValue</c>.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetContextStr(System.String)">
            <summary>
            Возвращает строку из контекста пользователя, который относится к данному сеансу.
            </summary>
            <param name="xPath">Строка поиска в контексте пользователя.</param>
            <returns>Текст найденного элемента контекста.</returns>
            <remarks>Если контекст пользователя не содержит запрошенного 
            элемента, будет возвращена пустая строка.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.ContextContains(System.String)">
            <summary>
            Возвращает признак наличия в контексте пользователя указанного элемента.
            </summary>
            <param name="xPath">Строка поиска в контексте пользователя.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.IsPolicyEnabled(System.String)">
            <summary>
            Возвращает признак того, что указанная политика безопасности разрешена для текущего пользователя.
            </summary>
            <param name="policyName">Название политики безопасности.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.CheckPolicy(System.String)">
            <summary>
            Выполняет проверку того, что указанная политика безопасности разрешена для текущего пользователя.
            </summary>
            <param name="policyName">Название политики безопасности.</param>
            <remarks>Если указанная политика безопасности не разрешена для текущего пользователя,
            будет сгенерировано исключение.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetPolicyCaption(System.String)">
            <summary>
            Возвращает заголовок указанной политики безопасности.
            </summary>
            <param name="policyName">Название политики безопасности.</param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.AddScriptLibs(Scripting.ScriptControl,System.String[])">
            <summary>
            Добавляет библиотеки скриптов в элемент управления скриптом.
            </summary>
            <param name="control"></param>
            <param name="usingLibNames"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.GetObjectFromRef(System.String)">
            <summary>
            Возвращает реестровый объект по текстовой ссылке.
            </summary>
            <param name="objectRef"></param>
            <returns></returns>
            <remarks>Текстовая ссылка должна быть представлена в формате "идентификатор:класс".<br></br>
            Если задана пустая строка, будет возвращен нетипизированный нулевой объект.<br></br>
            Если задана строка в формате ":класс", будет возвращен нулевой объект соответствующего класса.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.CreateSlaveSession">
            <summary>
            Создает сеанс, работающий в подчиненном режиме по отношению к данному сеансу.
            </summary>
            <returns></returns>
            <remarks>Подчиненный сеанс работает под той же учетной записью, что и данный.</remarks>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.EnsureSessionObject(Integro.InMeta.Runtime.DataObject)">
            <summary>
            Возвращает реестровый объект, принадлежащий данному сеансу.
            </summary>
            <param name="obj">Исходный объект.</param>
            <returns>Если исходный объект принадлежит данному сеансу, то будет возвращен исходный объект.
            В противном случае будет возвращен объект, принадлежащий данному сеансу.
            Класс и идентификатор объекта будут совпадать с исходным.</returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.OnBeforeCommitToMemory">
            <summary>
            Вызывается в тот момент, когда изменения уже были внесены в БД, но еще доступна информация по ним.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.CopyChangesFrom(Integro.InMeta.Runtime.DataSession)">
            <summary>
            !!! Данная процедура копирования изменений из внешней сессии 
            должна вызываться только внутри обработчика<c>OnBeforeCommitToMemory</c>y
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.TraceUnplannedPropertyLoading(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Выполняет протоколирование попытки получения значения свойства без предварительного плана загрузки.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.TraceUnplannedChildrenLoading(Integro.InMeta.Runtime.MetadataChildRef)">
            <summary>
            Выполняет протоколирование попытки получения списка дочерних объектов без предварительного плана загрузки.
            </summary>
            <param name="childRef"></param>
        </member>
        <member name="E:Integro.InMeta.Runtime.DataSession.Disposed">
            <summary>
            Вызывается при завершении работы с сеансом.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.IsSlave">
            <summary>
            Возвращает признак того, что данный сеанс работает в подчиненном режиме.
            </summary>
            <remarks>Ведущий сеанс можно получить при помощи свойства <c>MasterSession</c>.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.CurrentUser">
            <summary>
            Возвращает текущего пользователя.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.ContextNode">
            <summary>
            Возвращает исходный узел контекста текущего пользователя.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.Db">
            <summary>
            Возвращает объект доступа к БД.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.ScriptLibraries">
            <summary>
            Возвращает объект доступ к библиотекам скриптов.
            Используется для инициализации элементов управления серверными скриптами.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.Item(Integro.InMeta.Runtime.MetadataClass)">
            <summary>
            Возвращает хранилище для указанного класса.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.Item(System.String)">
            <summary>
            Возвращает хранилище для класса с указанным названием.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.PermanentCentralServerConnection">
            <summary>
            Возвращает или устанавливает признак постоянного TCP-соединения с центральным сервером 
            данных ИнМета.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.HasUpdates">
            <summary>
            Возвращает признак того, что в рамках сеанса были внесены изменения в реестровые объекты.
            </summary>
            <remarks>Возвращает <c>true</c>, если в процессе работы с сеансом изменялись значения свойств, добавлялись и удалялись реестровые объекты.</remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.MasterSession">
            <summary>
            Возвращает/устанавливает ведущий сеанс (тот, по отношению к которому данный сеанс является подчиненным).
            </summary>
            <remarks>Если данный сеанс работает не в подчиненном режиме, то будет возвращен <c>null</c>.
            При установке ведущего сеанса все изменения и кэш данного сеанса будут сброшены.
            </remarks>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.IgnoreErrorsInObjectViewVirtualProperties">
            <summary>
            Определяет поведение функции вычисления представления объекта, содержащего виртуальные свойства с навигацией по битой ссылке.
            Если <code>false</code>, то генерируется исключение.
            Если <code>true</code>, то возвращается пустое значение.
            </summary>
        </member>
        <member name="E:Integro.InMeta.Runtime.DataSession.BeforeCommitToMemory">
            <summary>
            Событие возникает в тот момент, когда изменения уже были внесены в БД, но еще доступна информация по ним
            </summary>
        </member>
        <member name="E:Integro.InMeta.Runtime.DataSession.UnplannedPropertyLoading">
            <summary>
            Возникает при попытке получения значения свойства без предварительного плана загрузки.
            </summary>
        </member>
        <member name="E:Integro.InMeta.Runtime.DataSession.UnplannedChildrenLoading">
            <summary>
            Возникает при попытке получения списка дочерних объектов без предварительного плана загрузки.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataSession.ErrorLevel">
            <summary>
            Уровень ошибки.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.ErrorLevel.Warning">
            <summary>
            Предупреждение.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.ErrorLevel.Critical">
            <summary>
            Критическая.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataSession.CommitError">
            <summary>
            Ошибка применения изменений.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.CommitError.Level">
            <summary>
            Уровень.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.DataSession.CommitError.Text">
            <summary>
            Текст.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.DataSession.CommitErrorList">
            <summary>
            Список ошибок применения изменений.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.CommitErrorList.ToString">
            <summary>
            Возвращает список ошибок в виде строки.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.DataSession.CommitErrorList.GetEnumerator">
            <summary>
            Реализация перечислителя.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.CommitErrorList.HasWarnings">
            <summary>
            Возвращает признак наличия предупреждений в списке.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.CommitErrorList.HasCritical">
            <summary>
            Возвращает признак наличия критических ошибок.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.CommitErrorList.Count">
            <summary>
            Возвращает количество ошибок.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Runtime.DataSession.CommitErrorList.Item(System.Int32)">
            <summary>
            Возвращает ошибку по индексу.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.UnplannedChildrenLoadingEventArgs">
            <summary>
            Параметры события UnplannedChildrenLoading.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.UnplannedChildrenLoadingEventArgs.ChildRef">
            <summary>
            Информация о дочернем классе, для которого не запланирована загрузка.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.UnplannedChildrenLoadingEventArgs.#ctor(Integro.InMeta.Runtime.MetadataChildRef)">
            <summary>
            Инициализация параметров события.
            </summary>
            <param name="childRef"></param>
        </member>
        <member name="T:Integro.InMeta.Runtime.UnplannedPropertyLoadingEventArgs">
            <summary>
            Параметры события UnplannedPropertyLoading.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.UnplannedPropertyLoadingEventArgs.Property">
            <summary>
            Информация о свойстве, для которого не запланирована загрузка.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.UnplannedPropertyLoadingEventArgs.#ctor(Integro.InMeta.Runtime.MetadataProperty)">
            <summary>
            Инициализация параметров события.
            </summary>
            <param name="property"></param>
        </member>
        <member name="T:Scripting.ScriptCodeException">
            <summary>
            Ошибка в коде скрипта.
            </summary>
        </member>
        <member name="F:Scripting.ScriptCodeException.ExcepInfo">
            <summary>
            Информация об ошибке.
            </summary>
        </member>
        <member name="M:Scripting.ScriptCodeException.#ctor(System.Runtime.InteropServices.ComTypes.EXCEPINFO)">
            <summary>
            Инициализация ошибки.
            </summary>
            <param name="excepInfo"></param>
        </member>
        <member name="T:Scripting.ScriptControlError">
            <summary>
            Подробная информация об ошибке, возникшей в скрипте.
            </summary>
        </member>
        <member name="M:Scripting.ScriptControlError.Clear">
            <summary>
            Сброс всех параметров ошибки.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.Source">
            <summary>
            Модуль или метод, в котором возникла ошибка.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.Number">
            <summary>
            Код ошибки.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.Description">
            <summary>
            Описание ошибки.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.Text">
            <summary>
            Исходный текст строки скрипта, в которой возникла ошибка.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.Line">
            <summary>
            Номер строки в скрипте, в которой возникла ошибка. Начинается с 1.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.Column">
            <summary>
            Позиция в строке скрипта, в которой возникла ошибка. Начинается с 1.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.SourceContext">
            <summary>
            Контекст исходного текста скрипта, в котором возникла ошибка. Обычно - это сам текст скрипта.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.HelpFile">
            <summary>
            Имя файла справки, содержащего подробное описание ошибки.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControlError.HelpContext">
            <summary>
            Местоположение в файле справки, содержащего подробное описание ошибки.
            </summary>
        </member>
        <member name="T:Scripting.ScriptControl">
            <summary>
            Исполняющая система выполнения скриптов.
            </summary>
        </member>
        <member name="F:Scripting.ScriptControl.Error">
            <summary>
            Информация о последней ошибке, возникшей в скрипте.
            </summary>
        </member>
        <member name="M:Scripting.ScriptControl.AddCode(System.String,System.Object)">
            <summary>
            Добавляет текст программы.
            </summary>
            <param name="code">Исходный текст программы.</param>
            <param name="sourceContext">Информация об источнике исходного текста (обычно сам исходный текст).</param>
        </member>
        <member name="M:Scripting.ScriptControl.AddCode(System.String)">
            <summary>
             Добавляет текст программы. В качестве контекста исхъодного текста задается сам текст.
            </summary>
            <param name="code">Исходный текст программы.</param>
        </member>
        <member name="M:Scripting.ScriptControl.AddObject(System.String,System.Object,System.Boolean)">
            <summary>
            Добавляет объект, доступный в тексте скрипта.
            </summary>
            <param name="name">Имя объекта.</param>
            <param name="obj">Объект.</param>
            <param name="addMembers">Призак того, что все свойства и методы объекта 
            будут видны скрипту как глобальные переменные и процедуры.</param>
        </member>
        <member name="M:Scripting.ScriptControl.Dispose">
            <summary>
            Выполняет уничтожение исполняющей подсистемы.
            </summary>
        </member>
        <member name="M:Scripting.ScriptControl.Close">
            <summary>
            Завершение подсистемы управления скриптом.
            </summary>
        </member>
        <member name="M:Scripting.ScriptControl.ExecuteStatement(System.String)">
            <summary>
            Выполняет инструкцию в контексте текущего кода скрипта.
            </summary>
            <param name="statement">Текст инструкции.</param>
        </member>
        <member name="M:Scripting.ScriptControl.Eval(System.String)">
            <summary>
            Выполняет вычисление выражения.
            </summary>
            <param name="statement">Выражение.</param>
            <returns>Результат вычисления выражения.</returns>
        </member>
        <member name="M:Scripting.ScriptControl.MemberExists(System.String)">
            <summary>
            Возвращает признак того, что в скрипте присутствует процедура с заданным именем.
            </summary>
            <param name="name">Имя процедуры.</param>
            <returns>true, если процедура существует, false в противном случае.</returns>
        </member>
        <member name="M:Scripting.ScriptControl.Run(System.String,System.Object[])">
            <summary>
            Выполняет процедуру с заданным именем.
            </summary>
            <param name="procedureName">Имя процедуры.</param>
            <param name="parameters">Значения параметров процедуры.</param>
            <returns>Результат выполнения процедуры.</returns>
        </member>
        <member name="M:Scripting.ScriptControl.Reset">
            <summary>
            Выполняет сброс исполняющей системы.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControl.Language">
            <summary>
            Язык программирования скрипта.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControl.SiteWindowHandle">
            <summary>
            Дескриптор окна, используемого в качестве родительского окна для сообщений, выводимых скриптом.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControl.Timeout">
            <summary>
            Величина задержки ожидания отклика от скрипта.
            </summary>
        </member>
        <member name="P:Scripting.ScriptControl.CodeObject">
            <summary>
             Возвращает объект программы.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Runtime.Utility">
            <summary>
             Набор вспомогательных методов.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.Utility.SimpleEncryptionMethod">
            <summary>
             Метод шифрования пароля по умолчанию.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Runtime.Utility.Encrypt(System.String,System.String)">
            <summary>
             Шифрует строку.
            </summary>
            <param name="decrypted"></param>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Integro.InMeta.Runtime.Utility.Decrypt(System.String,System.String)">
            <summary>
             Расшифровывает строку.
            </summary>
            <param name="encrypted"></param>
            <param name="method"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Integro.InMeta.Runtime.Utility.GetSyncVersion(System.String)">
            <summary>
             Возвращает версию файла синхронизации.
            </summary>
            <param name="syncFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Utility.IncreaseSyncVersion(System.String)">
            <summary>
             Увеличивает версию файла синхронизации.
            </summary>
            <param name="syncFileName"></param>
        </member>
        <member name="M:Integro.InMeta.Runtime.Utility.PrepareComParameter(System.Object)">
            <summary>
             Выполняет подготовку значения параметра, передающегося в COM. Заменяет значения типа decimal на CurrencyWrapper.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Runtime.Utility.GetScriptErrorDetailsHtml(Scripting.ScriptControlError,Integro.InMeta.Runtime.ScriptErrorOperation,System.String)">
            <summary>
             Возвращает подробное описание ошибки выполнения скрипта.
            </summary>
            <param name="error">Параметры ошибки.</param>
            <param name="errorOperation">Операция, вызвавшая ошибку.</param>
            <param name="scriptMetadataSource">Описание элемента метаданных, содержащего скрипт.</param>
            <returns></returns>
        </member>
        <member name="T:Integro.InMeta.Runtime.ScriptErrorOperation">
            <summary>
             Операция, вызвавшая ошибку при выполнении кода.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ScriptErrorOperation.AddCode">
            <summary>
            Добавление кода в скрипт.
            </summary>
        </member>
        <member name="F:Integro.InMeta.Runtime.ScriptErrorOperation.Run">
            <summary>
            Выполнение процедуры скрипта.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Web.WebPage">
            <summary>
            Представляет базовый класс веб-страниц.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Web.WebPage.CreateApplicationInstance">
            <summary>
            Создает экземпляр прикладного приложения.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Web.WebPage.OnUnload(System.EventArgs)">
            <summary>
            Уничтожение сеанса серверной среды выполнения.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Integro.InMeta.Web.WebPage.LogRecordId">
            <summary>
            Возвращает идентификатор записи журнала, относящейся к вызову данной страницы.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebPage.WebApplication">
            <summary>
            Возвращает веб-приложение.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebPage.WebSession">
            <summary>
            Возвращает веб-сеанс.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebPage.WebContext">
            <summary>
             Возвращает HttpContext для данной страницы.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebPage.Application">
            <summary>
            Возвращает приложение.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebPage.Session">
            <summary>
            Возвращает сеанс.
            </summary>
        </member>
        <member name="T:Integro.InMeta.Web.WebService">
            <summary>
            Представляет базовый класс веб-служб.
            </summary>
        </member>
        <member name="M:Integro.InMeta.Web.WebService.CreateApplicationInstance">
            <summary>
            Создает экземпляр прикладного приложения.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Integro.InMeta.Web.WebService.Dispose(System.Boolean)">
            <summary>
            Освободить ресурсы.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Integro.InMeta.Web.WebService.LogRecordId">
            <summary>
            Возвращает идентификатор записи журнала, относящейся к вызову данной страницы.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebService.WebApplication">
            <summary>
            Возвращает веб-приложение.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebService.WebSession">
            <summary>
            Возвращает веб-сеанс.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebService.Application">
            <summary>
            Возвращает приложение.
            </summary>
        </member>
        <member name="P:Integro.InMeta.Web.WebService.Session">
            <summary>
            Возвращает сеанс.
            </summary>
        </member>
    </members>
</doc>
